
function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_ss(lambda,..
        Ax,Bx,Cx,Dx,a0x_de_z)
  [lhs,rhs]=argn(0);
  if rhs<6 then
    a0x_de_z=0;
  end
  nx=max(size(Ax));
  if (nx==1) then
    [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_ss_1(lambda,..
        Ax,Bx,Cx,Dx,a0x_de_z)
  elseif (nx==2) then
    [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_ss_2(lambda,..
        Ax,Bx,Cx,Dx,a0x_de_z)
  else
    error("state-space order "+string(nx)+"not yet implemented");
  end
endfunction
function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_ss_1(lambda,..
        Ax,Bx,Cx,Dx,a0x_de_z)
      [lhs,rhs]=argn(0);
      if (rhs<6) then
        a0x_de_z=0;
      end 
      b0x_de_z=1-abs(a0x_de_z);
      if (a0x_de_z~=0) then
      // noise transfer =(1+signe(a0). z^-1)/(1+a0.z^-1)
        b1Fqz=1;b0Fqz=sign(a0x_de_z);
        a1Fqz=1;a0Fqz=a0x_de_z;
      else
      // no noise because z programmation
        b1Fqz=0;b0Fqz=0;
        a1Fqz=0;a0Fqz=1;
      end
      a11=Ax(1,1);
      b1=Bx(1);
      c1=Cx(1);
      d=Dx;
// compute FES for 1st order state_space
// generated by clc_statespace1.mac
      m=3;n=5;
      Zr= zeros(m,n);
      N0w= Zr;
      N1w= Zr;
      N2w= Zr;
      N3w= Zr;
      N4w= Zr;
      D0w= Zr;
      D1w= Zr;
      D2w= Zr;
      D3w= Zr;
      D4w= Zr;
      t1 = (b1*c1-a11*d)*b0x_de_z+d*a0x_de_z+d
      t2 = c1*a0x_de_z
      t3 = t2+c1
      t4 = a0x_de_z+1
      t5 = (a11*d-b1*c1)*b0x_de_z-d*a0x_de_z+d
      t6 = -a0x_de_z
      t7 = t6+1
      t8 = -a11*b0x_de_z+a0x_de_z+1
      t9 = t8*lambda
      t10 = a0Fqz*a0x_de_z
      t11 = -a11*a0Fqz
      t12 = (t11-a11*a1Fqz)*b0x_de_z+t4*a1Fqz+t10+a0Fqz
      t13 = a11*b0x_de_z+t6+1
      t14 = t13*lambda
      t15 = 2*a11*a0Fqz*b0x_de_z+2*a1Fqz-2*a0Fqz*a0x_de_z
      t16 = (a11*a1Fqz+t11)*b0x_de_z+t7*a1Fqz+t10-a0Fqz
      N0w(1,1) = t1
      N0w(1,2) = t1
      N0w(1,3) = 2*c1*b0x_de_z
      N0w(1,4) = t3*b1Fqz+t3*b0Fqz
      N0w(1,5) = 1
      N0w(2,1) = lambda
      N0w(2,2) = 1
      N0w(3,1) = b1*b0x_de_z*lambda
      N0w(3,2) = b1*b0x_de_z
      N0w(3,3) = 2*b0x_de_z
      N0w(3,4) = t4*b1Fqz+t4*b0Fqz
      N1w(1,1) = t5
      N1w(1,2) = t5
      N1w(1,3) = -2*c1*b0x_de_z
      N1w(1,4) = 2*c1*b1Fqz-2*c1*a0x_de_z*b0Fqz
      N1w(3,1) = -b1*b0x_de_z*lambda
      N1w(3,2) = -b1*b0x_de_z
      N1w(3,3) = -2*b0x_de_z
      N1w(3,4) = 2*b1Fqz-2*a0x_de_z*b0Fqz
      N2w(1,4) = (c1-c1*a0x_de_z)*b1Fqz+(t2-c1)*b0Fqz
      N2w(3,4) = t7*b1Fqz+(a0x_de_z-1)*b0Fqz
      D0w(1,1) = t8
      D0w(1,2) = t9
      D0w(1,3) = t9
      D0w(1,4) = t12*lambda
      D0w(1,5) = lambda
      D0w(2,1) = 1
      D0w(2,2) = 1
      D0w(2,3) = 1
      D0w(2,4) = 1
      D0w(2,5) = 1
      D0w(3,1) = t8
      D0w(3,2) = t8
      D0w(3,3) = t8
      D0w(3,4) = t12
      D0w(3,5) = 1
      D1w(1,1) = t13
      D1w(1,2) = t14
      D1w(1,3) = t14
      D1w(1,4) = t15*lambda
      D1w(3,1) = t13
      D1w(3,2) = t13
      D1w(3,3) = t13
      D1w(3,4) = t15
      D2w(1,4) = t16*lambda
      D2w(3,4) = t16
      w=poly(0,'w');
      Nw=N0w+N1w*w+N2w*w^2+N3w*w^3+N4w*w^4;
      Dw=D0w+D1w*w+D2w*w^2+D3w*w^3+D4w*w^4;
      z=poly(0,'z');
      z_1=poly(0,'z_1');
      w_de_z=(z-1)/(z+1);
      w_de_z_1=(1-z_1)/(1+z_1);
     [Nw,Dw]=make_as_list(real(Nw),real(Dw),%t);
     Fw=make_as_F(Nw,Dw);
     Fz=hornerij(Fw,w_de_z,'hd');
     [Nz,Dz]=make_as_ND(Fz);
     Fz_1=hornerij(Fw,w_de_z_1,'ld');
     [Nz_1,Dz_1]=make_as_ND(Fz_1);
endfunction


function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_ss_2(lambda,..
        Ax,Bx,Cx,Dx,a0x_de_z)
      if (rhs<6) then
        a0x_de_z=0;
      end 
      b0x_de_z=1-abs(a0x_de_z);
      if (a0x_de_z~=0) then
      // noise transfer =(1+signe(a0). z^-1)/(1+a0.z^-1)
        b1Fqz=1;b0Fqz=sign(a0x_de_z);
        a1Fqz=1;a0Fqz=a0x_de_z;
      else
      // no noise because z programmation
        b1Fqz=0;b0Fqz=0;
        a1Fqz=0;a0Fqz=1;
      end
      a11=Ax(1,1);
      a12=Ax(1,2);
      a21=Ax(2,1);
      a22=Ax(2,2);
      b1=Bx(1);
      b2=Bx(2);
      c1=Cx(1);
      c2=Cx(2);
      d=Dx;
// compute FES for 2nd order state_space
// generated by clc_statespace2.mac
      m=4;n=7;
      Zr= zeros(m,n);
      N0w= Zr;
      N1w= Zr;
      N2w= Zr;
      N3w= Zr;
      N4w= Zr;
      D0w= Zr;
      D1w= Zr;
      D2w= Zr;
      D3w= Zr;
      D4w= Zr;
      t1 = a0x_de_z^2
      t2 = d*t1
      t3 = b1*c1
      t4 = b2*c2
      t5 = -a11
      t6 = -a22
      t7 = t6+t5
      t8 = t7*d
      t9 = (t8+t4+t3)*a0x_de_z
      t10 = a12*b2-a22*b1
      t11 = a21*b1-a11*b2
      t12 = a11*a22-a12*a21
      t13 = b0x_de_z^2
      t14 = (t12*d+t11*c2+t10*c1)*t13
      t15 = t14+(t9+t8+t4+t3)*b0x_de_z+t2+2*d*a0x_de_z+d
      t16 = c1*a0x_de_z
      t17 = -a22*c1
      t18 = a21*c2
      t19 = t18+t17
      t20 = t19*t13
      t21 = c2*a0x_de_z
      t22 = a12*c1
      t23 = -a11*c2
      t24 = t23+t22
      t25 = t24*t13
      t26 = 2*c1*a0x_de_z
      t27 = c1*t1
      t28 = t19*a0x_de_z
      t29 = t28+t18+t17
      t30 = 2*c2*a0x_de_z
      t31 = c2*t1
      t32 = t24*a0x_de_z
      t33 = t32+t23+t22
      t34 = b1*a0x_de_z
      t35 = t10*t13
      t36 = t35+(t34+b1)*b0x_de_z
      t37 = (a0x_de_z+1)*b0x_de_z
      t38 = -a22*t13
      t39 = a12*t13
      t40 = 2*a0x_de_z
      t41 = t1+t40+1
      t42 = t41*b0Fqz
      t43 = -a22*a0x_de_z
      t44 = t43+t6
      t45 = a12*a0x_de_z
      t46 = t45+a12
      t47 = b2*a0x_de_z
      t48 = t11*t13
      t49 = t48+(t47+b2)*b0x_de_z
      t50 = a21*t13
      t51 = -a11*t13
      t52 = a21*a0x_de_z
      t53 = t52+a21
      t54 = -a11*a0x_de_z
      t55 = t54+t5
      t56 = 2*a22+2*a11
      t57 = 2*a22*b1-2*a12*b2
      t58 = 2*a11*b2-2*a21*b1
      t59 = 2*a12*a21-2*a11*a22
      t60 = (t59*d+t58*c2+t57*c1)*t13+(t56*d-2*b2*c2-2*b1*c1)*a0x_de_z*b0x_de_z..
        -2*d*t1+2*d
      t61 = -2*c1*a0x_de_z
      t62 = a22*c1
      t63 = -a21*c2
      t64 = 3*c1
      t65 = -c1*t1
      t66 = (t63+t62)*a0x_de_z
      t67 = t66+t18+t17
      t68 = -2*c2*a0x_de_z
      t69 = -a12*c1
      t70 = a11*c2
      t71 = 3*c2
      t72 = -c2*t1
      t73 = (t70+t69)*a0x_de_z
      t74 = t73+t23+t22
      t75 = t57*t13-2*b1*a0x_de_z*b0x_de_z
      t76 = -2*a0x_de_z*b0x_de_z
      t77 = -2*a0x_de_z
      t78 = (-3*t1+t77+1)*b0Fqz
      t79 = -t1
      t80 = a22*a0x_de_z
      t81 = t80+t6
      t82 = -a12
      t83 = -a12*a0x_de_z
      t84 = t83+a12
      t85 = t58*t13-2*b2*a0x_de_z*b0x_de_z
      t86 = -a21
      t87 = -a21*a0x_de_z
      t88 = t87+a21
      t89 = a11*a0x_de_z
      t90 = t89+t5
      t91 = a22+a11
      t92 = t14+(t9+t91*d-b2*c2-b1*c1)*b0x_de_z+t2-2*d*a0x_de_z+d
      t93 = -c1
      t94 = -c2
      t95 = t35+(t34-b1)*b0x_de_z
      t96 = (a0x_de_z-1)*b0x_de_z
      t97 = (3*t1+t77-1)*b0Fqz
      t98 = t48+(t47-b2)*b0x_de_z
      t99 = (t79+t40-1)*b0Fqz
      t100 = t7*a0x_de_z
      t101 = t100+t6+t5
      t102 = t12*t13
      t103 = t102+t101*b0x_de_z+t1+t40+1
      t104 = t103*lambda
      t105 = 2*a0Fqz*a0x_de_z
      t106 = t7*a0Fqz
      t107 = t12*a1Fqz
      t108 = (t107+t12*a0Fqz)*t13+(t101*a1Fqz+t7*a0Fqz*a0x_de_z+t106)*b0x_de_z..
        +t41*a1Fqz+a0Fqz*t1+t105+a0Fqz
      t109 = t108*lambda
      t110 = t59*t13+t56*a0x_de_z*b0x_de_z-2*t1+2
      t111 = t110*lambda
      t112 = -2*a0Fqz*a0x_de_z
      t113 = t91*a0Fqz
      t114 = t91*a0x_de_z
      t115 = a12*a21-a11*a22
      t116 = t115*a1Fqz
      t117 = (t116+(3*a12*a21-3*a11*a22)*a0Fqz)*t13+((t114+t6+t5)*a1Fqz..
        +(3*a22+3*a11)*a0Fqz*a0x_de_z+t113)*b0x_de_z+(t79+t40+3)*a1Fqz-3*a0Fqz..
        *t1+t112+a0Fqz
      t118 = t117*lambda
      t119 = t100+a22+a11
      t120 = t102+t119*b0x_de_z+t1+t77+1
      t121 = t120*lambda
      t122 = -a0Fqz
      t123 = (t116+(3*a11*a22-3*a12*a21)*a0Fqz)*t13+((t114+a22+a11)*a1Fqz..
        +(-3*a22-3*a11)*a0Fqz*a0x_de_z+t113)*b0x_de_z+(t79+t77+3)*a1Fqz+3*a0Fqz..
        *t1+t112+t122
      t124 = t123*lambda
      t125 = (t107+t115*a0Fqz)*t13+(t119*a1Fqz+t91*a0Fqz*a0x_de_z+t106)*b0x_de_z..
        +(t1+t77+1)*a1Fqz-a0Fqz*t1+t105+t122
      t126 = t125*lambda
// ^^*CALCUL DES SORTIES ^^^^^ 
      N0w(1,1) = t15
      N0w(1,2) = t15
      N0w(1,3) = t20+(t16+c1)*b0x_de_z
      N0w(1,4) = t25+(t21+c2)*b0x_de_z
      N0w(1,5) = (t29*b0x_de_z+t27+t26+c1)*b1Fqz+t29*b0Fqz*b0x_de_z+(t27+t26..
        +c1)*b0Fqz
      N0w(1,6) = (t33*b0x_de_z+t31+t30+c2)*b1Fqz+t33*b0Fqz*b0x_de_z+(t31+t30..
        +c2)*b0Fqz
      N0w(1,7) = 1
      N0w(2,1) = lambda
      N0w(2,2) = 1
      N0w(3,1) = t36*lambda
      N0w(3,2) = t36
      N0w(3,3) = t38+t37
      N0w(3,4) = t39
      N0w(3,5) = (t44*b0x_de_z+t1+t40+1)*b1Fqz+t44*b0Fqz*b0x_de_z+t42
      N0w(3,6) = t46*b0x_de_z*b1Fqz+t46*b0Fqz*b0x_de_z
      N0w(4,1) = t49*lambda
      N0w(4,2) = t49
      N0w(4,3) = t50
      N0w(4,4) = t51+t37
      N0w(4,5) = t53*b0x_de_z*b1Fqz+t53*b0Fqz*b0x_de_z
      N0w(4,6) = (t55*b0x_de_z+t1+t40+1)*b1Fqz+t55*b0Fqz*b0x_de_z+t42
      N1w(1,1) = t60
      N1w(1,2) = t60
      N1w(1,3) = (2*a22*c1-2*a21*c2)*t13-2*c1*a0x_de_z*b0x_de_z
      N1w(1,4) = (2*a11*c2-2*a12*c1)*t13-2*c2*a0x_de_z*b0x_de_z
      N1w(1,5) = (t67*b0x_de_z+t65+t26+t64)*b1Fqz+((3*a22*c1-3*a21*c2)*a0x_de_z..
        +t63+t62)*b0Fqz*b0x_de_z+(-3*c1*t1+t61+c1)*b0Fqz
      N1w(1,6) = (t74*b0x_de_z+t72+t30+t71)*b1Fqz+((3*a11*c2-3*a12*c1)*a0x_de_z..
        +t70+t69)*b0Fqz*b0x_de_z+(-3*c2*t1+t68+c2)*b0Fqz
      N1w(3,1) = t75*lambda
      N1w(3,2) = t75
      N1w(3,3) = 2*a22*t13+t76
      N1w(3,4) = -2*a12*t13
      N1w(3,5) = (t81*b0x_de_z+t79+t40+3)*b1Fqz+(3*a22*a0x_de_z+a22)*b0Fqz*b0x_de_z..
        +t78
      N1w(3,6) = t84*b0x_de_z*b1Fqz+(t82-3*a12*a0x_de_z)*b0Fqz*b0x_de_z
      N1w(4,1) = t85*lambda
      N1w(4,2) = t85
      N1w(4,3) = -2*a21*t13
      N1w(4,4) = 2*a11*t13+t76
      N1w(4,5) = t88*b0x_de_z*b1Fqz+(t86-3*a21*a0x_de_z)*b0Fqz*b0x_de_z
      N1w(4,6) = (t90*b0x_de_z+t79+t40+3)*b1Fqz+(3*a11*a0x_de_z+a11)*b0Fqz*b0x_de_z..
        +t78
      N2w(1,1) = t92
      N2w(1,2) = t92
      N2w(1,3) = t20+(t16+t93)*b0x_de_z
      N2w(1,4) = t25+(t21+t94)*b0x_de_z
      N2w(1,5) = ((t66+t63+t62)*b0x_de_z+t65+t61+t64)*b1Fqz+((3*a21*c2-3..
        *a22*c1)*a0x_de_z+t63+t62)*b0Fqz*b0x_de_z+(3*c1*t1+t61+t93)*b0Fqz
      N2w(1,6) = ((t73+t70+t69)*b0x_de_z+t72+t68+t71)*b1Fqz+((3*a12*c1-3..
        *a11*c2)*a0x_de_z+t70+t69)*b0Fqz*b0x_de_z+(3*c2*t1+t68+t94)*b0Fqz
      N2w(3,1) = t95*lambda
      N2w(3,2) = t95
      N2w(3,3) = t38+t96
      N2w(3,4) = t39
      N2w(3,5) = ((t80+a22)*b0x_de_z+t79+t77+3)*b1Fqz+(a22-3*a22*a0x_de_z)*b0Fqz..
        *b0x_de_z+t97
      N2w(3,6) = (t83+t82)*b0x_de_z*b1Fqz+(3*a12*a0x_de_z+t82)*b0Fqz*b0x_de_z
      N2w(4,1) = t98*lambda
      N2w(4,2) = t98
      N2w(4,3) = t50
      N2w(4,4) = t51+t96
      N2w(4,5) = (t87+t86)*b0x_de_z*b1Fqz+(3*a21*a0x_de_z+t86)*b0Fqz*b0x_de_z
      N2w(4,6) = ((t89+a11)*b0x_de_z+t79+t77+3)*b1Fqz+(a11-3*a11*a0x_de_z)*b0Fqz..
        *b0x_de_z+t97
      N3w(1,5) = ((t28+t63+t62)*b0x_de_z+t27+t61+c1)*b1Fqz+t67*b0Fqz*b0x_de_z..
        +(t65+t26+t93)*b0Fqz
      N3w(1,6) = ((t32+t70+t69)*b0x_de_z+t31+t68+c2)*b1Fqz+t74*b0Fqz*b0x_de_z..
        +(t72+t30+t94)*b0Fqz
      N3w(3,5) = ((t43+a22)*b0x_de_z+t1+t77+1)*b1Fqz+t81*b0Fqz*b0x_de_z+t99
      N3w(3,6) = (t45+t82)*b0x_de_z*b1Fqz+t84*b0Fqz*b0x_de_z
      N3w(4,5) = (t52+t86)*b0x_de_z*b1Fqz+t88*b0Fqz*b0x_de_z
      N3w(4,6) = ((t54+a11)*b0x_de_z+t1+t77+1)*b1Fqz+t90*b0Fqz*b0x_de_z+t99
      D0w(1,1) = t103
      D0w(1,2) = t104
      D0w(1,3) = t104
      D0w(1,4) = t104
      D0w(1,5) = t109
      D0w(1,6) = t109
      D0w(1,7) = lambda
      D0w(2,1) = 1
      D0w(2,2) = 1
      D0w(2,3) = 1
      D0w(2,4) = 1
      D0w(2,5) = 1
      D0w(2,6) = 1
      D0w(2,7) = 1
      D0w(3,1) = t103
      D0w(3,2) = t103
      D0w(3,3) = t103
      D0w(3,4) = t103
      D0w(3,5) = t108
      D0w(3,6) = t108
      D0w(3,7) = 1
      D0w(4,1) = t103
      D0w(4,2) = t103
      D0w(4,3) = t103
      D0w(4,4) = t103
      D0w(4,5) = t108
      D0w(4,6) = t108
      D0w(4,7) = 1
      D1w(1,1) = t110
      D1w(1,2) = t111
      D1w(1,3) = t111
      D1w(1,4) = t111
      D1w(1,5) = t118
      D1w(1,6) = t118
      D1w(3,1) = t110
      D1w(3,2) = t110
      D1w(3,3) = t110
      D1w(3,4) = t110
      D1w(3,5) = t117
      D1w(3,6) = t117
      D1w(4,1) = t110
      D1w(4,2) = t110
      D1w(4,3) = t110
      D1w(4,4) = t110
      D1w(4,5) = t117
      D1w(4,6) = t117
      D2w(1,1) = t120
      D2w(1,2) = t121
      D2w(1,3) = t121
      D2w(1,4) = t121
      D2w(1,5) = t124
      D2w(1,6) = t124
      D2w(3,1) = t120
      D2w(3,2) = t120
      D2w(3,3) = t120
      D2w(3,4) = t120
      D2w(3,5) = t123
      D2w(3,6) = t123
      D2w(4,1) = t120
      D2w(4,2) = t120
      D2w(4,3) = t120
      D2w(4,4) = t120
      D2w(4,5) = t123
      D2w(4,6) = t123
      D3w(1,5) = t126
      D3w(1,6) = t126
      D3w(3,5) = t125
      D3w(3,6) = t125
      D3w(4,5) = t125
      D3w(4,6) = t125
      w=poly(0,'w');
      Nw=N0w+N1w*w+N2w*w^2+N3w*w^3+N4w*w^4;
      Dw=D0w+D1w*w+D2w*w^2+D3w*w^3+D4w*w^4;
      z=poly(0,'z');
      z_1=poly(0,'z_1');
      w_de_z=(z-1)/(z+1);
      w_de_z_1=(1-z_1)/(1+z_1);
     [Nw,Dw]=make_as_list(real(Nw),real(Dw),%t);
     Fw=make_as_F(Nw,Dw);
     Fz=hornerij(Fw,w_de_z,'hd');
     [Nz,Dz]=make_as_ND(Fz);
     Fz_1=hornerij(Fw,w_de_z_1,'ld');
     [Nz_1,Dz_1]=make_as_ND(Fz_1);
endfunction
   function [Q,MBal]=my_balance(M,tol)
     [lhs,rhs]=argn(0);
     if (rhs<2) then
       tol=1e-6;
     end
     [U,D,V]=svd(M)
     [m,n]=size(D);
     E=sum(D)/m;
     Di=D;
  // it 1
     
     G=eye(D);
     ijG=[];
     while %t,
       dd=diag(Di);
       [m,j]=max(dd);
       [m,i]=min(dd);
       dii=dd(i);
       djj=dd(j);
       if abs(djj-dii)<=tol*abs(dii+djj) then
         break;
       end
       ijG=[ijG;[i,j]]; 
       c=sqrt((djj-E)/(djj-dii));
       s=sqrt((E-dii)/(djj-dii));
       Gij=eye(Di);
       Gij(i,i)=c;   Gij(j,j)=c;
       Gij(i,j)=-s;   Gij(j,i)=s;
       Di=Gij*Di*Gij';
       G=Gij*G;
     end
  // now we have G.D.G' with equals diagonal elements { trace(D)/m },
  // and D= U'*M*U
  // so [G.U'].M.[U.G'] has the desired diagonal elements
  // so by posing : Q=U.G' , we have Q such as Q'.G.Q has balanced diagonal
    Q=U*G';
    if (lhs>1) then 
      MBal=Di;
    end
  endfunction
  function [sys_hwang]=hwang_optimal_ss(sys_ABCD_x,a0x_de_z)
    [lhs,rhs]=argn(0);
    if (rhs<2) then
      a0x_de_z=0;
    end 
    if a0x_de_z~=0 then
      sys_hwang=hwang_optimal_ss_x(sys_ABCD_x,a0x_de_z); 
      return
    end
    sys_hwang=hwang_optimal_ss_z(sys_ABCD_x);
  endfunction
  function [sys_hwang_z]=hwang_optimal_ss_z(sys_ABCD)
    sys_ABCD.dt='d';
    K0=ctr_gram(sys_ABCD);
    W0=obs_gram(sys_ABCD);
    [nc,tmp]=size(K0);
    K0_12=K0^(1/2);
    K0_12W0K0_12=K0_12*W0*K0_12;
    K0_12W0K0_12=(K0_12W0K0_12+K0_12W0K0_12')/2;

    SQRT_K0_12W0K0_12=K0_12W0K0_12^(1/2);
    SQRT_L=trace(SQRT_K0_12W0K0_12) / nc;
    P1=SQRT_L * K0_12 * pinv(SQRT_K0_12W0K0_12) * K0_12;
    P1=(P1+P1')/2;
    P1_12=P1^(1/2);
    inv_P1_12=pinv(P1_12);
    M= inv_P1_12*K0*inv_P1_12;
    [V,Kbal]=my_balance(M,1e-3);
    Topt=real(P1_12*V);
    inv_Topt=inv(Topt);
    Ap=inv_Topt*sys_ABCD.A*Topt;
    Bp=inv_Topt*sys_ABCD.B;
    Cp=sys_ABCD.C*Topt;
    Dp=sys_ABCD.D;
    sys_hwang_z=syslin(sys_ABCD.dt,Ap,Bp,Cp,Dp);
  endfunction
  function [sys_hwang_x]=hwang_optimal_ss_x(sys_ABCD_x,a0x_de_z)
    if (a0x_de_z==0) then
      sys_hwang_x=hwang_optimal_ss_z(sys_ABCD_x);
      return
    end
    sys_ABCD_x.dt='d';
    Ax=sys_ABCD_x.A;
    Bx=sys_ABCD_x.B;
    Cx=sys_ABCD_x.C;
    Dx=sys_ABCD_x.D;
    b0=1-abs(a0x_de_z);
    sign_a0=sign(a0x_de_z); 
    Az=b0*Ax+sign_a0*(b0-1)*eye(Ax);
    Bw=[Ax+eye(Ax)*sign_a0];
    Cwv=b0*Cx;
    Dw=Cx;
  // computation of K0, from Az,Bx and b0
    sys_K=syslin("d",Az,Bx,zeros(Cx),zeros(Dx));
    K0=ctr_gram(sys_K);
  // the variables to be scaled to unit power are Ss=b0.Xs, 
  // so multiply K0 by b0^2 to take this into account
  // then K0 became the power matrix of S=b0.Id.X
    K0=K0*b0^2;
  // computation of W0, from Az,Bw,Cwv,Dw
  // the idea is that a coordinate transformation S-> Tx.S
  // acts on this quantity by W0 -> Tx'.W0.Tx
  // exactly like on the basic hwang algorithm
    sys_W=syslin("d",Az,Bw,Cwv,Dw);
    Wwv=obs_gram(sys_W);
    Wv=Wwv;
    Ww=Bw' * Wwv * Bw + Dw' * Dw;
    W0=Wv+Ww;
  // and now apply classical hhwang algorithm on K0 and W0
    [nc,tmp]=size(K0);
    K0_12=K0^(1/2);
    K0_12W0K0_12=K0_12*W0*K0_12;
    K0_12W0K0_12=(K0_12W0K0_12+K0_12W0K0_12')/2;
    SQRT_K0_12W0K0_12=K0_12W0K0_12^(1/2);
    SQRT_L=trace(SQRT_K0_12W0K0_12) / nc;
    P1=SQRT_L * K0_12 * pinv(SQRT_K0_12W0K0_12) * K0_12;
    P1=(P1+P1')/2;
    P1_12=P1^(1/2);
    inv_P1_12=pinv(P1_12);
    M= inv_P1_12*K0*inv_P1_12;
    [V,Kbal]=my_balance(M,1e-3);
    Topt=real(P1_12*V);
    inv_Topt=inv(Topt);
    Ap=inv_Topt*Ax*Topt;
    Bp=inv_Topt*Bx;
    Cp=Cx*Topt;
    Dp=Dx;
    sys_hwang_x=syslin(sys_ABCD_x.dt,Ap,Bp,Cp,Dp);
  endfunction

  function [sys_normal]=normal_optimal_ss(sys_abcd)
    dt=sys_abcd.dt;
    sys_abcd.dt='d';
    A0=sys_abcd.A;
    B0=sys_abcd.B;
    C0=sys_abcd.C;
    D0=sys_abcd.D;
    [N,tmp]=size(A0);
    [X0,D]=spec(A0);
  
    inv_X0=inv(X0);
    Wo_0=obs_gram(sys_abcd);
    Wc_0=ctr_gram(sys_abcd);
    Wo_tild=real(X0'*Wo_0*X0);
    Wc_tild=real(inv_X0*Wc_0*inv_X0');
  // critere a minimiser :
  // min   trace(Wo) =min     sum Wo_tild(i,i)/psi_i^2
  // {psik}           {psik}
  // sous la contrainte trace(Wc_tild .PSI)=N =0
  //                 <=>sum Wc_tild(i,i).psi_i^2 =N
  // par LAGRANGE on obtient
  //  L(lbd,psik) =    sum Wo_tild(i,i)/psi_i^2
  //              +lbd.[( sum Wc_tild(i,i).psi_i^2 )- N]
  // d'ou on deduit
  // 1- Psi_k^2=sqrt(Wo_tild(k,k)/Wc_tild(k,k)) /sqrt(lbd)
  // 2- lbd^(-1/2)=N/sum(sqrt(W0_tild(k,k).Wc_tild(k,k))
    lbd_moins_1demi=N/sum(sqrt(diag(Wo_tild)).*sqrt(diag(Wc_tild)));
    lbd=(1/lbd_moins_1demi)^2;
    Psi=sqrt(diag(Wo_tild))./sqrt(diag(Wc_tild));
    Psi=Psi*lbd_moins_1demi;
    inv_Psi=diag(ones(Psi)./Psi);
    T1=real(X0*inv_Psi*X0');
    T1=T1^(1/2);
    inv_T1=inv(T1);
  // here T1 and T1' are equal, so ' is used only for lisibility...
    Wc_T1=inv_T1*Wc_0*inv_T1';
    Wo_T1=T1'*Wo_0*T1;
    [Q_opt,Wc_opt_wished]=my_balance(Wc_T1);
    T=real(T1*Q_opt);
    inv_T=inv(T);
    A_opt=inv_T*A0*T;
    B_opt=inv_T*B0;
    C_opt=C0*T;
    D_opt=D0;
    sys_normal=syslin(dt,A_opt,B_opt,C_opt,D_opt);
  endfunction
  function [sys_scaled]=scaled_ss(sys_abcd)
    dt=sys_abcd.dt;
    sys_abcd.dt='d';
    A0=sys_abcd.A;
    B0=sys_abcd.B;
    C0=sys_abcd.C;
    D0=sys_abcd.D;
    [N,tmp]=size(A0);
    Wc_0=ctr_gram(sys_abcd);
    T_scaled=sqrt(diag(Wc_0));
    T_scaled=diag(T_scaled); 
    T=T_scaled;
    inv_T=inv(T);
    A_scaled=inv_T*A0*T;
    B_scaled=inv_T*B0;
    C_scaled=C0*T;
    D_scaled=D0;
    sys_scaled=syslin(dt,A_scaled,B_scaled,C_scaled,D_scaled);
  endfunction
  function  [pow_y,pow_x]=analyse_noise_ss(sys_ss)
    [lhs,rhs]=argn(0);
    sys_ss.dt='d';
    Wc=ctr_gram(sys_ss);
    [N,tmp]=size(Wc);
    Wo=obs_gram(sys_ss);
    pow_y=(N+1)*(sum(diag(Wo))+1);
    if (lhs >1 ) then
      pow_x=diag(Wc);
    end
  endfunction

