----------------------------------------------------------------------------------
-- Company: Universite Bordeaux 1 departement EEA
-- Engineer: Autogenerated code 
--
-- Create Date:    
-- Design Name:
-- Module Name:    high_pass - Behavioral
-- Project Name:
-- Target Devices:
-- Tool versions:
-- Description:
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.ALL;-- use signed numbers for numerical computations
entity high_pass is
Port ( ent       : in   STD_LOGIC_VECTOR (15 downto 0); --N=16 bits
       sor       : out  STD_LOGIC_VECTOR (15 downto 0); --N=16 bits
       clk_50MHz : in std_logic ;
       f_ech     : in std_logic);
end high_pass;
architecture Behavioral of RII_exemple is
 signal tmp_1, tmp_3, x2_2, x1_2, opx2_2, x2_3, x1_3, opx2_3, x2_4, x1_4 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal opx2_4, x2_5, x1_5, opx2_5, x2_6, x1_6, opx2_6, output_16 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal opi1_2, tmp_19, tmp_20, tmp_21, tmp_22, tmp_23, tmp_24, i1_2, opi2_2, tmp_28 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_29, tmp_30, tmp_31, tmp_32, tmp_33, i2_2, opi1_3, tmp_49, tmp_50, tmp_51 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_52, tmp_53, tmp_54, i1_3, opi2_3, tmp_58, tmp_59, tmp_60, tmp_61, tmp_62 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_63, i2_3, opi1_4, tmp_79, tmp_80, tmp_81, tmp_82, tmp_83, tmp_84, i1_4 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal opi2_4, tmp_88, tmp_89, tmp_90, tmp_91, tmp_92, tmp_93, i2_4 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal opi1_5, tmp_109, tmp_110, tmp_111, tmp_112, tmp_113, tmp_114, i1_5, opi2_5, tmp_118 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_119, tmp_120, tmp_121, tmp_122, tmp_123, i2_5, opi1_6, tmp_139, tmp_140, tmp_141 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_142, tmp_143, tmp_144, i1_6, opi2_6, tmp_148, tmp_149, tmp_150, tmp_151, tmp_152 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_153, i2_6 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_2, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_10, tmp_11, tmp_12 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_13, tmp_14, tmp_15, tmp_35, tmp_36, tmp_37, tmp_38, tmp_39, tmp_40, tmp_41 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_42, tmp_43, tmp_44, tmp_45, tmp_65, tmp_66, tmp_67, tmp_68, tmp_69, tmp_70 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_71, tmp_72, tmp_73, tmp_74, tmp_75, tmp_95, tmp_96, tmp_97, tmp_98, tmp_99 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_100, tmp_101, tmp_102, tmp_103, tmp_104, tmp_105, tmp_125, tmp_126, tmp_127, tmp_128 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_129, tmp_130, tmp_131, tmp_132, tmp_133, tmp_134, tmp_135, tmp_155, tmp_156, tmp_157 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_158, tmp_159, tmp_160, tmp_161, tmp_162, tmp_163, tmp_164, tmp_165, tmp_166, tmp_167 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_168, tmp_169, tmp_170, tmp_171, tmp_172 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
begin
    ---------------------------------------------------------------------------------------------------------------
    -- begin of filter : convert 16 bits logic input :ent, to signed equivalent :tmp_1
    ---------------------------------------------------------------------------------------------------------------------
    tmp_1 <= signed(ent);
    tmp_2<= resize( tmp_1 , 32 );
    ---------------------------------------------
    -- code of cel 1
    ---------------------------------------------
     -- en<-en .2^0 
    tmp_3<= resize( tmp_2 , 16 ); -- en<-b0 . en 
    tmp_4 <= tmp_3 * to_signed(31165,16) ;
    tmp_155 <= shift_right(tmp_4,3) ; -- scale output of cel 1
    tmp_156 <= tmp_155 + to_signed(1,32) ;
    tmp_157 <= shift_right(tmp_156,1) ;
    -- local output :tmp_157 of cel 1 will be accumulated
    ---------------------------------------------
    -- code of cel 2
    ---------------------------------------------
    tmp_5 <= shift_left(tmp_2,10) ; -- en<<L+LA ,L=-4,LA=14
      -- AR part of cel 2
    tmp_6 <= x2_2 * to_signed(29664,16) ; -- - a1 . x1 
    tmp_7 <= tmp_6 + tmp_5 ;
    tmp_8 <= opx2_2 * to_signed(-30451,16) ; -- - a2 . x2 
    tmp_9 <= tmp_8 + tmp_7 ;
    tmp_10 <= shift_right(tmp_9,13) ; -- vn<-en >> LA 
    tmp_11 <= tmp_10 + to_signed(1,32) ;
    tmp_12 <= shift_right(tmp_11,1) ;
    x1_2 <= tmp_12(15 downto 0); -- x1=vn  
      -- MA part of cel 2
    tmp_13 <= x2_2 * to_signed(13275,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_14 <= opx2_2 * to_signed(-19186,16) ; -- b2 .op x2
    tmp_15 <= tmp_14 + tmp_13 ; -- output of cel 2
    -- x2_2 <- q(x1_2), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_1: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_2 <= i1_2 ;
           end if;
      end if;
    end process;
    x2_2 <= tmp_21(15 downto 0);
    tmp_22<= resize( x1_2 , 22 );
    tmp_23<= resize( x2_2 , 22 );
    tmp_24 <= tmp_22 - tmp_23 ;
    i1_2 <= tmp_24 + opi1_2 ;
    tmp_19 <= shift_right(opi1_2,4) ;
    tmp_20 <= tmp_19 + to_signed(1,22) ;
    tmp_21 <= shift_right(tmp_20,1) ;
    -- opx2_2 <- q(x2_2), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_2: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_2 <= i2_2 ;
           end if;
      end if;
    end process;
    opx2_2 <= tmp_30(15 downto 0);
    tmp_31<= resize( x2_2 , 22 );
    tmp_32<= resize( opx2_2 , 22 );
    tmp_33 <= tmp_31 - tmp_32 ;
    i2_2 <= tmp_33 + opi2_2 ;
    tmp_28 <= shift_right(opi2_2,4) ;
    tmp_29 <= tmp_28 + to_signed(1,22) ;
    tmp_30 <= shift_right(tmp_29,1) ;
     -- scale output of cel 2
    tmp_158 <= tmp_15 + to_signed(1,32) ;
    tmp_159 <= shift_right(tmp_158,1) ;
    -- accumulation of output: tmp_159 of cel 2 with local output: tmp_157
    tmp_160 <= tmp_157 + tmp_159 ;
    ---------------------------------------------
    -- code of cel 3
    ---------------------------------------------
    tmp_35 <= shift_left(tmp_2,11) ; -- en<<L+LA ,L=-3,LA=14
      -- AR part of cel 3
    tmp_36 <= x2_3 * to_signed(24894,16) ; -- - a1 . x1 
    tmp_37 <= tmp_36 + tmp_35 ;
    tmp_38 <= opx2_3 * to_signed(-23183,16) ; -- - a2 . x2 
    tmp_39 <= tmp_38 + tmp_37 ;
    tmp_40 <= shift_right(tmp_39,13) ; -- vn<-en >> LA 
    tmp_41 <= tmp_40 + to_signed(1,32) ;
    tmp_42 <= shift_right(tmp_41,1) ;
    x1_3 <= tmp_42(15 downto 0); -- x1=vn  
      -- MA part of cel 3
    tmp_43 <= x2_3 * to_signed(28026,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_44 <= opx2_3 * to_signed(-11817,16) ; -- b2 .op x2
    tmp_45 <= tmp_44 + tmp_43 ; -- output of cel 3
    -- x2_3 <- q(x1_3), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_3: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_3 <= i1_3 ;
           end if;
      end if;
    end process;
    x2_3 <= tmp_51(15 downto 0);
    tmp_52<= resize( x1_3 , 22 );
    tmp_53<= resize( x2_3 , 22 );
    tmp_54 <= tmp_52 - tmp_53 ;
    i1_3 <= tmp_54 + opi1_3 ;
    tmp_49 <= shift_right(opi1_3,4) ;
    tmp_50 <= tmp_49 + to_signed(1,22) ;
    tmp_51 <= shift_right(tmp_50,1) ;
    -- opx2_3 <- q(x2_3), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_4: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_3 <= i2_3 ;
           end if;
      end if;
    end process;
    opx2_3 <= tmp_60(15 downto 0);
    tmp_61<= resize( x2_3 , 22 );
    tmp_62<= resize( opx2_3 , 22 );
    tmp_63 <= tmp_61 - tmp_62 ;
    i2_3 <= tmp_63 + opi2_3 ;
    tmp_58 <= shift_right(opi2_3,4) ;
    tmp_59 <= tmp_58 + to_signed(1,22) ;
    tmp_60 <= shift_right(tmp_59,1) ;
     -- scale output of cel 3
    tmp_161 <= tmp_45 + to_signed(1,32) ;
    tmp_162 <= shift_right(tmp_161,1) ;
    -- accumulation of output: tmp_162 of cel 3 with local output: tmp_160
    tmp_163 <= tmp_160 + tmp_162 ;
    ---------------------------------------------
    -- code of cel 4
    ---------------------------------------------
    tmp_65 <= shift_left(tmp_2,12) ; -- en<<L+LA ,L=-2,LA=14
      -- AR part of cel 4
    tmp_66 <= x2_4 * to_signed(20927,16) ; -- - a1 . x1 
    tmp_67 <= tmp_66 + tmp_65 ;
    tmp_68 <= opx2_4 * to_signed(-15261,16) ; -- - a2 . x2 
    tmp_69 <= tmp_68 + tmp_67 ;
    tmp_70 <= shift_right(tmp_69,13) ; -- vn<-en >> LA 
    tmp_71 <= tmp_70 + to_signed(1,32) ;
    tmp_72 <= shift_right(tmp_71,1) ;
    x1_4 <= tmp_72(15 downto 0); -- x1=vn  
      -- MA part of cel 4
    tmp_73 <= x2_4 * to_signed(24762,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_74 <= opx2_4 * to_signed(28641,16) ; -- b2 .op x2
    tmp_75 <= tmp_74 + tmp_73 ; -- output of cel 4
    -- x2_4 <- q(x1_4), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_5: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_4 <= i1_4 ;
           end if;
      end if;
    end process;
    x2_4 <= tmp_81(15 downto 0);
    tmp_82<= resize( x1_4 , 22 );
    tmp_83<= resize( x2_4 , 22 );
    tmp_84 <= tmp_82 - tmp_83 ;
    i1_4 <= tmp_84 + opi1_4 ;
    tmp_79 <= shift_right(opi1_4,4) ;
    tmp_80 <= tmp_79 + to_signed(1,22) ;
    tmp_81 <= shift_right(tmp_80,1) ;
    -- opx2_4 <- q(x2_4), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_6: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_4 <= i2_4 ;
           end if;
      end if;
    end process;
    opx2_4 <= tmp_90(15 downto 0);
    tmp_91<= resize( x2_4 , 22 );
    tmp_92<= resize( opx2_4 , 22 );
    tmp_93 <= tmp_91 - tmp_92 ;
    i2_4 <= tmp_93 + opi2_4 ;
    tmp_88 <= shift_right(opi2_4,4) ;
    tmp_89 <= tmp_88 + to_signed(1,22) ;
    tmp_90 <= shift_right(tmp_89,1) ;
    tmp_164 <= shift_right(tmp_75,1) ; -- scale output of cel 4
    tmp_165 <= tmp_164 + to_signed(1,32) ;
    tmp_166 <= shift_right(tmp_165,1) ;
    -- accumulation of output: tmp_166 of cel 4 with local output: tmp_163
    tmp_167 <= tmp_163 + tmp_166 ;
    ---------------------------------------------
    -- code of cel 5
    ---------------------------------------------
    tmp_95 <= shift_left(tmp_2,14) ; -- en<<L+LA ,L=-1,LA=15
      -- AR part of cel 5
    tmp_96 <= x2_5 * to_signed(6856,16) ; -- - a1 . x1 
    tmp_97 <= tmp_96 + tmp_95 ;
    tmp_98 <= opx2_5 * to_signed(-28491,16) ; -- - a2 . x2 
    tmp_99 <= tmp_98 + tmp_97 ;
    tmp_100 <= shift_right(tmp_99,14) ; -- vn<-en >> LA 
    tmp_101 <= tmp_100 + to_signed(1,32) ;
    tmp_102 <= shift_right(tmp_101,1) ;
    x1_5 <= tmp_102(15 downto 0); -- x1=vn  
      -- MA part of cel 5
    tmp_103 <= x2_5 * to_signed(-10519,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_104 <= opx2_5 * to_signed(22982,16) ; -- b2 .op x2
    tmp_105 <= tmp_104 + tmp_103 ; -- output of cel 5
    -- x2_5 <- q(x1_5), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_7: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_5 <= i1_5 ;
           end if;
      end if;
    end process;
    x2_5 <= tmp_111(15 downto 0);
    tmp_112<= resize( x1_5 , 23 );
    tmp_113<= resize( x2_5 , 23 );
    tmp_114 <= tmp_112 - tmp_113 ;
    i1_5 <= tmp_114 + opi1_5 ;
    tmp_109 <= shift_right(opi1_5,5) ;
    tmp_110 <= tmp_109 + to_signed(1,23) ;
    tmp_111 <= shift_right(tmp_110,1) ;
    -- opx2_5 <- q(x2_5), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_8: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_5 <= i2_5 ;
           end if;
      end if;
    end process;
    opx2_5 <= tmp_120(15 downto 0);
    tmp_121<= resize( x2_5 , 23 );
    tmp_122<= resize( opx2_5 , 23 );
    tmp_123 <= tmp_121 - tmp_122 ;
    i2_5 <= tmp_123 + opi2_5 ;
    tmp_118 <= shift_right(opi2_5,5) ;
    tmp_119 <= tmp_118 + to_signed(1,23) ;
    tmp_120 <= shift_right(tmp_119,1) ;
     -- scale output of cel 5
    -- accumulation of output: tmp_105 of cel 5 with local output: tmp_167
    tmp_168 <= tmp_167 + tmp_105 ;
    ---------------------------------------------
    -- code of cel 6
    ---------------------------------------------
    tmp_125 <= shift_left(tmp_2,14) ; -- en<<L+LA ,L=-1,LA=15
      -- AR part of cel 6
    tmp_126 <= x2_6 * to_signed(975,16) ; -- - a1 . x1 
    tmp_127 <= tmp_126 + tmp_125 ;
    tmp_128 <= opx2_6 * to_signed(-3338,16) ; -- - a2 . x2 
    tmp_129 <= tmp_128 + tmp_127 ;
    tmp_130 <= shift_right(tmp_129,14) ; -- vn<-en >> LA 
    tmp_131 <= tmp_130 + to_signed(1,32) ;
    tmp_132 <= shift_right(tmp_131,1) ;
    x1_6 <= tmp_132(15 downto 0); -- x1=vn  
      -- MA part of cel 6
    tmp_133 <= x2_6 * to_signed(-29342,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_134 <= opx2_6 * to_signed(4174,16) ; -- b2 .op x2
    tmp_135 <= tmp_134 + tmp_133 ; -- output of cel 6
    -- x2_6 <- q(x1_6), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_9: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_6 <= i1_6 ;
           end if;
      end if;
    end process;
    x2_6 <= tmp_141(15 downto 0);
    tmp_142<= resize( x1_6 , 23 );
    tmp_143<= resize( x2_6 , 23 );
    tmp_144 <= tmp_142 - tmp_143 ;
    i1_6 <= tmp_144 + opi1_6 ;
    tmp_139 <= shift_right(opi1_6,5) ;
    tmp_140 <= tmp_139 + to_signed(1,23) ;
    tmp_141 <= shift_right(tmp_140,1) ;
    -- opx2_6 <- q(x2_6), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_10: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_6 <= i2_6 ;
           end if;
      end if;
    end process;
    opx2_6 <= tmp_150(15 downto 0);
    tmp_151<= resize( x2_6 , 23 );
    tmp_152<= resize( opx2_6 , 23 );
    tmp_153 <= tmp_151 - tmp_152 ;
    i2_6 <= tmp_153 + opi2_6 ;
    tmp_148 <= shift_right(opi2_6,5) ;
    tmp_149 <= tmp_148 + to_signed(1,23) ;
    tmp_150 <= shift_right(tmp_149,1) ;
     -- scale output of cel 6
    -- accumulation of output: tmp_135 of cel 6 with local output: tmp_168
    tmp_169 <= tmp_168 + tmp_135 ;
    ----------------------------------------------------------
    -- end of filter, scale global output : tmp_169
    ----------------------------------------------------------
    tmp_170 <= shift_right(tmp_169,10) ;
    tmp_171 <= tmp_170 + to_signed(1,32) ;
    tmp_172 <= shift_right(tmp_171,1) ;
    output_16 <= tmp_172(15 downto 0);
    sor <= std_logic_vector(output_16);
end Behavioral;
