----------------------------------------------------------------------------------
-- Company: Universite Bordeaux 1 departement EEA
-- Engineer: Autogenerated code 
--
-- Create Date:    
-- Design Name:
-- Module Name:    low_pass - Behavioral
-- Project Name:
-- Target Devices:
-- Tool versions:
-- Description:
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.ALL;-- use signed numbers for numerical computations
entity low_pass is
Port ( ent       : in   STD_LOGIC_VECTOR (15 downto 0); --N=16 bits
       sor       : out  STD_LOGIC_VECTOR (15 downto 0); --N=16 bits
       clk_50MHz : in std_logic ;
       f_ech     : in std_logic);
end low_pass;
architecture Behavioral of RII_exemple is
 signal tmp_1, tmp_3, e_2, op_x1_2, x1_2, op_x2_2, x2_2, e_3, op_x1_3, x1_3 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal op_x2_3, x2_3, e_4, op_x1_4, x1_4, op_x2_4, x2_4, e_5, op_x1_5, x1_5 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal op_x2_5, x2_5, e_6, op_x1_6, x1_6, op_x2_6, x2_6, e_7, op_x1_7, x1_7 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal op_x2_7, x2_7, output_16 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal opi1_2, tmp_26, tmp_27, tmp_28, tmp_29, i1_2, opi1_2, tmp_34, tmp_35, tmp_36 : signed (20 downto 0) := "000000000000000000000";-- signaux intermediaires sur 21 bits,  niveau 0
 signal tmp_37, i1_2, opi1_3, tmp_60, tmp_61, tmp_62, tmp_63, i1_3, opi1_3, tmp_68 : signed (20 downto 0) := "000000000000000000000";-- signaux intermediaires sur 21 bits,  niveau 0
 signal tmp_69, tmp_70, tmp_71, i1_3, opi1_4, tmp_94, tmp_95, tmp_96, tmp_97, i1_4 : signed (20 downto 0) := "000000000000000000000";-- signaux intermediaires sur 21 bits,  niveau 0
 signal opi1_4, tmp_102, tmp_103, tmp_104, tmp_105, i1_4, opi1_5, tmp_128, tmp_129, tmp_130 : signed (20 downto 0) := "000000000000000000000";-- signaux intermediaires sur 21 bits,  niveau 0
 signal tmp_131, i1_5, opi1_5, tmp_136, tmp_137, tmp_138, tmp_139, i1_5, opi1_6, tmp_162 : signed (20 downto 0) := "000000000000000000000";-- signaux intermediaires sur 21 bits,  niveau 0
 signal tmp_163, tmp_164, tmp_165, i1_6, opi1_6, tmp_170, tmp_171, tmp_172, tmp_173, i1_6 : signed (20 downto 0) := "000000000000000000000";-- signaux intermediaires sur 21 bits,  niveau 0
 signal opi1_7, tmp_196, tmp_197, tmp_198, tmp_199, i1_7, opi1_7, tmp_204, tmp_205, tmp_206 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_207, i1_7 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_2, tmp_4, tmp_5, tmp_7, tmp_8, tmp_9, tmp_10, tmp_11, tmp_12, tmp_13 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp_19, tmp_20, tmp_21, tmp_22, tmp_39 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_41, tmp_42, tmp_43, tmp_44, tmp_45, tmp_46, tmp_47, tmp_48, tmp_49, tmp_50 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_51, tmp_52, tmp_53, tmp_54, tmp_55, tmp_56, tmp_73, tmp_75, tmp_76, tmp_77 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_78, tmp_79, tmp_80, tmp_81, tmp_82, tmp_83, tmp_84, tmp_85, tmp_86, tmp_87 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_88, tmp_89, tmp_90, tmp_107, tmp_109, tmp_110, tmp_111, tmp_112, tmp_113, tmp_114 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_115, tmp_116, tmp_117, tmp_118, tmp_119, tmp_120, tmp_121, tmp_122, tmp_123, tmp_124 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_141, tmp_143, tmp_144, tmp_145, tmp_146, tmp_147, tmp_148, tmp_149, tmp_150, tmp_151 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_152, tmp_153, tmp_154, tmp_155, tmp_156, tmp_157, tmp_158, tmp_175, tmp_177, tmp_178 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_179, tmp_180, tmp_181, tmp_182, tmp_183, tmp_184, tmp_185, tmp_186, tmp_187, tmp_188 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_189, tmp_190, tmp_191, tmp_192, tmp_209, tmp_210, tmp_211, tmp_212, tmp_213, tmp_214 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_215, tmp_216, tmp_217, tmp_218, tmp_219, tmp_220 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
begin
    ---------------------------------------------------------------------------------------------------------------
    -- begin of filter : convert 16 bits logic input :ent, to signed equivalent :tmp_1
    ---------------------------------------------------------------------------------------------------------------------
    tmp_1 <= signed(ent);
    tmp_2<= resize( tmp_1 , 32 );
    ---------------------------------------------
    -- code of cel 1
    ---------------------------------------------
     -- en<-en .2^0 
    tmp_3<= resize( tmp_2 , 16 ); -- en<-b0 . en 
    tmp_4 <= tmp_3 * to_signed(20142,16) ;
    tmp_209 <= shift_right(tmp_4,8) ; -- scale output of cel 1
    -- local output :tmp_209 of cel 1 will be accumulated
    ---------------------------------------------
    -- code of cel 2
    ---------------------------------------------
    tmp_5 <= shift_right(tmp_4,8) ; -- vn<-en<<L ,L=-8
    e_2 <= tmp_5(15 downto 0);
    tmp_4= (int_32)0; -- sn<-0,because D=0 
    -- update state x1_2 of cel 2
    tmp_7 <= e_2 * to_signed(3805,16) ; -- accx<-b1.vn 
    tmp_8 <= op_x1_2 * to_signed(15671,16) ; -- accx<-accx-a11 . op_x1_2 
    tmp_9 <= tmp_8 + tmp_7 ;
    tmp_10 <= op_x2_2 * to_signed(-16453,16) ; -- accx<-accx-a12 . op_x2_2 
    tmp_11 <= tmp_10 + tmp_9 ;
    tmp_12 <= shift_right(tmp_11,14) ; -- accx<-accx >> Lx1 
    x1_2 <= tmp_12(15 downto 0);
    tmp_13 <= op_x1_2 * to_signed(28840,16) ; -- sn<-sn+C1 . x1_2 
    tmp_14 <= tmp_13 + tmp_4 ;
    -- update state x2_2 of cel 2
    tmp_15 <= e_2 * to_signed(-2932,16) ; -- accx<-b2.vn 
    tmp_16 <= op_x2_2 * to_signed(16017,16) ; -- accx<-accx-a22 . op_x2_2 
    tmp_17 <= tmp_16 + tmp_15 ;
    tmp_18 <= op_x1_2 * to_signed(16496,16) ; -- accx<-accx-a21 . op_x1_2 
    tmp_19 <= tmp_18 + tmp_17 ;
    tmp_20 <= shift_right(tmp_19,14) ; -- accx<-accx >> Lx2 
    x2_2 <= tmp_20(15 downto 0);
    tmp_21 <= op_x2_2 * to_signed(-30696,16) ; -- sn<-sn+C2 . x2_2 
    tmp_22 <= tmp_21 + tmp_14 ;
    -- op_x1_2 <- q(x1_2), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_1: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_2 <= i1_2 ;
           end if;
      end if;
    end process;
    op_x1_2 <= tmp_26(15 downto 0);
    tmp_27<= resize( x1_2 , 21 );
    tmp_28<= resize( op_x1_2 , 21 );
    tmp_29 <= tmp_27 - tmp_28 ;
    i1_2 <= tmp_29 + opi1_2 ;
    tmp_26 <= shift_right(opi1_2,4) ;
    -- op_x2_2 <- q(x2_2), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_2: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_2 <= i1_2 ;
           end if;
      end if;
    end process;
    op_x2_2 <= tmp_34(15 downto 0);
    tmp_35<= resize( x2_2 , 21 );
    tmp_36<= resize( op_x2_2 , 21 );
    tmp_37 <= tmp_35 - tmp_36 ;
    i1_2 <= tmp_37 + opi1_2 ;
    tmp_34 <= shift_right(opi1_2,4) ;
    tmp_210 <= shift_right(tmp_22,1) ; -- scale output of cel 2
    -- accumulation of output: tmp_210 of cel 2 with local output: tmp_209
    tmp_211 <= tmp_209 + tmp_210 ;
    ---------------------------------------------
    -- code of cel 3
    ---------------------------------------------
    tmp_39 <= shift_right(tmp_22,7) ; -- vn<-en<<L ,L=-7
    e_3 <= tmp_39(15 downto 0);
    tmp_22= (int_32)0; -- sn<-0,because D=0 
    -- update state x1_3 of cel 3
    tmp_41 <= e_3 * to_signed(879,16) ; -- accx<-b1.vn 
    tmp_42 <= op_x1_3 * to_signed(15060,16) ; -- accx<-accx-a11 . op_x1_3 
    tmp_43 <= tmp_42 + tmp_41 ;
    tmp_44 <= op_x2_3 * to_signed(-16472,16) ; -- accx<-accx-a12 . op_x2_3 
    tmp_45 <= tmp_44 + tmp_43 ;
    tmp_46 <= shift_right(tmp_45,14) ; -- accx<-accx >> Lx1 
    x1_3 <= tmp_46(15 downto 0);
    tmp_47 <= op_x1_3 * to_signed(16700,16) ; -- sn<-sn+C1 . x1_3 
    tmp_48 <= tmp_47 + tmp_22 ;
    -- update state x2_3 of cel 3
    tmp_49 <= e_3 * to_signed(10315,16) ; -- accx<-b2.vn 
    tmp_50 <= op_x2_3 * to_signed(16470,16) ; -- accx<-accx-a22 . op_x2_3 
    tmp_51 <= tmp_50 + tmp_49 ;
    tmp_52 <= op_x1_3 * to_signed(16415,16) ; -- accx<-accx-a21 . op_x1_3 
    tmp_53 <= tmp_52 + tmp_51 ;
    tmp_54 <= shift_right(tmp_53,14) ; -- accx<-accx >> Lx2 
    x2_3 <= tmp_54(15 downto 0);
    tmp_55 <= op_x2_3 * to_signed(-16407,16) ; -- sn<-sn+C2 . x2_3 
    tmp_56 <= tmp_55 + tmp_48 ;
    -- op_x1_3 <- q(x1_3), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_3: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_3 <= i1_3 ;
           end if;
      end if;
    end process;
    op_x1_3 <= tmp_60(15 downto 0);
    tmp_61<= resize( x1_3 , 21 );
    tmp_62<= resize( op_x1_3 , 21 );
    tmp_63 <= tmp_61 - tmp_62 ;
    i1_3 <= tmp_63 + opi1_3 ;
    tmp_60 <= shift_right(opi1_3,4) ;
    -- op_x2_3 <- q(x2_3), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_4: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_3 <= i1_3 ;
           end if;
      end if;
    end process;
    op_x2_3 <= tmp_68(15 downto 0);
    tmp_69<= resize( x2_3 , 21 );
    tmp_70<= resize( op_x2_3 , 21 );
    tmp_71 <= tmp_69 - tmp_70 ;
    i1_3 <= tmp_71 + opi1_3 ;
    tmp_68 <= shift_right(opi1_3,4) ;
     -- scale output of cel 3
    -- accumulation of output: tmp_56 of cel 3 with local output: tmp_211
    tmp_212 <= tmp_211 + tmp_56 ;
    ---------------------------------------------
    -- code of cel 4
    ---------------------------------------------
    tmp_73 <= shift_right(tmp_56,6) ; -- vn<-en<<L ,L=-6
    e_4 <= tmp_73(15 downto 0);
    tmp_56= (int_32)0; -- sn<-0,because D=0 
    -- update state x1_4 of cel 4
    tmp_75 <= e_4 * to_signed(17519,16) ; -- accx<-b1.vn 
    tmp_76 <= op_x1_4 * to_signed(13180,16) ; -- accx<-accx-a11 . op_x1_4 
    tmp_77 <= tmp_76 + tmp_75 ;
    tmp_78 <= op_x2_4 * to_signed(-16667,16) ; -- accx<-accx-a12 . op_x2_4 
    tmp_79 <= tmp_78 + tmp_77 ;
    tmp_80 <= shift_right(tmp_79,14) ; -- accx<-accx >> Lx1 
    x1_4 <= tmp_80(15 downto 0);
    tmp_81 <= op_x1_4 * to_signed(-16674,16) ; -- sn<-sn+C1 . x1_4 
    tmp_82 <= tmp_81 + tmp_56 ;
    -- update state x2_4 of cel 4
    tmp_83 <= e_4 * to_signed(6260,16) ; -- accx<-b2.vn 
    tmp_84 <= op_x2_4 * to_signed(17852,16) ; -- accx<-accx-a22 . op_x2_4 
    tmp_85 <= tmp_84 + tmp_83 ;
    tmp_86 <= op_x1_4 * to_signed(16190,16) ; -- accx<-accx-a21 . op_x1_4 
    tmp_87 <= tmp_86 + tmp_85 ;
    tmp_88 <= shift_right(tmp_87,14) ; -- accx<-accx >> Lx2 
    x2_4 <= tmp_88(15 downto 0);
    tmp_89 <= op_x2_4 * to_signed(15897,16) ; -- sn<-sn+C2 . x2_4 
    tmp_90 <= tmp_89 + tmp_82 ;
    -- op_x1_4 <- q(x1_4), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_5: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_4 <= i1_4 ;
           end if;
      end if;
    end process;
    op_x1_4 <= tmp_94(15 downto 0);
    tmp_95<= resize( x1_4 , 21 );
    tmp_96<= resize( op_x1_4 , 21 );
    tmp_97 <= tmp_95 - tmp_96 ;
    i1_4 <= tmp_97 + opi1_4 ;
    tmp_94 <= shift_right(opi1_4,4) ;
    -- op_x2_4 <- q(x2_4), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_6: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_4 <= i1_4 ;
           end if;
      end if;
    end process;
    op_x2_4 <= tmp_102(15 downto 0);
    tmp_103<= resize( x2_4 , 21 );
    tmp_104<= resize( op_x2_4 , 21 );
    tmp_105 <= tmp_103 - tmp_104 ;
    i1_4 <= tmp_105 + opi1_4 ;
    tmp_102 <= shift_right(opi1_4,4) ;
     -- scale output of cel 4
    -- accumulation of output: tmp_90 of cel 4 with local output: tmp_212
    tmp_213 <= tmp_212 + tmp_90 ;
    ---------------------------------------------
    -- code of cel 5
    ---------------------------------------------
    tmp_107 <= shift_right(tmp_90,5) ; -- vn<-en<<L ,L=-5
    e_5 <= tmp_107(15 downto 0);
    tmp_90= (int_32)0; -- sn<-0,because D=0 
    -- update state x1_5 of cel 5
    tmp_109 <= e_5 * to_signed(29468,16) ; -- accx<-b1.vn 
    tmp_110 <= op_x1_5 * to_signed(9728,16) ; -- accx<-accx-a11 . op_x1_5 
    tmp_111 <= tmp_110 + tmp_109 ;
    tmp_112 <= op_x2_5 * to_signed(-15258,16) ; -- accx<-accx-a12 . op_x2_5 
    tmp_113 <= tmp_112 + tmp_111 ;
    tmp_114 <= shift_right(tmp_113,14) ; -- accx<-accx >> Lx1 
    x1_5 <= tmp_114(15 downto 0);
    tmp_115 <= op_x1_5 * to_signed(27579,16) ; -- sn<-sn+C1 . x1_5 
    tmp_116 <= tmp_115 + tmp_90 ;
    -- update state x2_5 of cel 5
    tmp_117 <= e_5 * to_signed(-27924,16) ; -- accx<-b2.vn 
    tmp_118 <= op_x2_5 * to_signed(19664,16) ; -- accx<-accx-a22 . op_x2_5 
    tmp_119 <= tmp_118 + tmp_117 ;
    tmp_120 <= op_x1_5 * to_signed(17688,16) ; -- accx<-accx-a21 . op_x1_5 
    tmp_121 <= tmp_120 + tmp_119 ;
    tmp_122 <= shift_right(tmp_121,14) ; -- accx<-accx >> Lx2 
    x2_5 <= tmp_122(15 downto 0);
    tmp_123 <= op_x2_5 * to_signed(-29944,16) ; -- sn<-sn+C2 . x2_5 
    tmp_124 <= tmp_123 + tmp_116 ;
    -- op_x1_5 <- q(x1_5), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_7: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_5 <= i1_5 ;
           end if;
      end if;
    end process;
    op_x1_5 <= tmp_128(15 downto 0);
    tmp_129<= resize( x1_5 , 21 );
    tmp_130<= resize( op_x1_5 , 21 );
    tmp_131 <= tmp_129 - tmp_130 ;
    i1_5 <= tmp_131 + opi1_5 ;
    tmp_128 <= shift_right(opi1_5,4) ;
    -- op_x2_5 <- q(x2_5), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_8: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_5 <= i1_5 ;
           end if;
      end if;
    end process;
    op_x2_5 <= tmp_136(15 downto 0);
    tmp_137<= resize( x2_5 , 21 );
    tmp_138<= resize( op_x2_5 , 21 );
    tmp_139 <= tmp_137 - tmp_138 ;
    i1_5 <= tmp_139 + opi1_5 ;
    tmp_136 <= shift_right(opi1_5,4) ;
    tmp_214 <= shift_right(tmp_124,1) ; -- scale output of cel 5
    -- accumulation of output: tmp_214 of cel 5 with local output: tmp_213
    tmp_215 <= tmp_213 + tmp_214 ;
    ---------------------------------------------
    -- code of cel 6
    ---------------------------------------------
    tmp_141 <= shift_right(tmp_124,4) ; -- vn<-en<<L ,L=-4
    e_6 <= tmp_141(15 downto 0);
    tmp_124= (int_32)0; -- sn<-0,because D=0 
    -- update state x1_6 of cel 6
    tmp_143 <= e_6 * to_signed(-16655,16) ; -- accx<-b1.vn 
    tmp_144 <= op_x1_6 * to_signed(6086,16) ; -- accx<-accx-a11 . op_x1_6 
    tmp_145 <= tmp_144 + tmp_143 ;
    tmp_146 <= op_x2_6 * to_signed(-15469,16) ; -- accx<-accx-a12 . op_x2_6 
    tmp_147 <= tmp_146 + tmp_145 ;
    tmp_148 <= shift_right(tmp_147,14) ; -- accx<-accx >> Lx1 
    x1_6 <= tmp_148(15 downto 0);
    tmp_149 <= op_x1_6 * to_signed(26078,16) ; -- sn<-sn+C1 . x1_6 
    tmp_150 <= tmp_149 + tmp_124 ;
    -- update state x2_6 of cel 6
    tmp_151 <= e_6 * to_signed(28647,16) ; -- accx<-b2.vn 
    tmp_152 <= op_x2_6 * to_signed(9259,16) ; -- accx<-accx-a22 . op_x2_6 
    tmp_153 <= tmp_152 + tmp_151 ;
    tmp_154 <= op_x1_6 * to_signed(7112,16) ; -- accx<-accx-a21 . op_x1_6 
    tmp_155 <= tmp_154 + tmp_153 ;
    tmp_156 <= shift_right(tmp_155,13) ; -- accx<-accx >> Lx2 
    x2_6 <= tmp_156(15 downto 0);
    tmp_157 <= op_x2_6 * to_signed(-25330,16) ; -- sn<-sn+C2 . x2_6 
    tmp_158 <= tmp_157 + tmp_150 ;
    -- op_x1_6 <- q(x1_6), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_9: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_6 <= i1_6 ;
           end if;
      end if;
    end process;
    op_x1_6 <= tmp_162(15 downto 0);
    tmp_163<= resize( x1_6 , 21 );
    tmp_164<= resize( op_x1_6 , 21 );
    tmp_165 <= tmp_163 - tmp_164 ;
    i1_6 <= tmp_165 + opi1_6 ;
    tmp_162 <= shift_right(opi1_6,4) ;
    -- op_x2_6 <- q(x2_6), avec q=(2^-4)/(z-[ 1 - (2^-4) ] )
    z_10: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_6 <= i1_6 ;
           end if;
      end if;
    end process;
    op_x2_6 <= tmp_170(15 downto 0);
    tmp_171<= resize( x2_6 , 21 );
    tmp_172<= resize( op_x2_6 , 21 );
    tmp_173 <= tmp_171 - tmp_172 ;
    i1_6 <= tmp_173 + opi1_6 ;
    tmp_170 <= shift_right(opi1_6,4) ;
    tmp_216 <= shift_right(tmp_158,1) ; -- scale output of cel 6
    -- accumulation of output: tmp_216 of cel 6 with local output: tmp_215
    tmp_217 <= tmp_215 + tmp_216 ;
    ---------------------------------------------
    -- code of cel 7
    ---------------------------------------------
    tmp_175 <= shift_right(tmp_158,4) ; -- vn<-en<<L ,L=-4
    e_7 <= tmp_175(15 downto 0);
    tmp_158= (int_32)0; -- sn<-0,because D=0 
    -- update state x1_7 of cel 7
    tmp_177 <= e_7 * to_signed(913,16) ; -- accx<-b1.vn 
    tmp_178 <= op_x1_7 * to_signed(-8731,16) ; -- accx<-accx-a11 . op_x1_7 
    tmp_179 <= tmp_178 + tmp_177 ;
    tmp_180 <= op_x2_7 * to_signed(-19864,16) ; -- accx<-accx-a12 . op_x2_7 
    tmp_181 <= tmp_180 + tmp_179 ;
    tmp_182 <= shift_right(tmp_181,13) ; -- accx<-accx >> Lx1 
    x1_7 <= tmp_182(15 downto 0);
    tmp_183 <= op_x1_7 * to_signed(-25142,16) ; -- sn<-sn+C1 . x1_7 
    tmp_184 <= tmp_183 + tmp_158 ;
    -- update state x2_7 of cel 7
    tmp_185 <= e_7 * to_signed(24247,16) ; -- accx<-b2.vn 
    tmp_186 <= op_x2_7 * to_signed(4200,16) ; -- accx<-accx-a22 . op_x2_7 
    tmp_187 <= tmp_186 + tmp_185 ;
    tmp_188 <= op_x1_7 * to_signed(2825,16) ; -- accx<-accx-a21 . op_x1_7 
    tmp_189 <= tmp_188 + tmp_187 ;
    tmp_190 <= shift_right(tmp_189,12) ; -- accx<-accx >> Lx2 
    x2_7 <= tmp_190(15 downto 0);
    tmp_191 <= op_x2_7 * to_signed(24123,16) ; -- sn<-sn+C2 . x2_7 
    tmp_192 <= tmp_191 + tmp_184 ;
    -- op_x1_7 <- q(x1_7), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_11: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_7 <= i1_7 ;
           end if;
      end if;
    end process;
    op_x1_7 <= tmp_196(15 downto 0);
    tmp_197<= resize( x1_7 , 22 );
    tmp_198<= resize( op_x1_7 , 22 );
    tmp_199 <= tmp_197 - tmp_198 ;
    i1_7 <= tmp_199 + opi1_7 ;
    tmp_196 <= shift_right(opi1_7,5) ;
    -- op_x2_7 <- q(x2_7), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_12: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_7 <= i1_7 ;
           end if;
      end if;
    end process;
    op_x2_7 <= tmp_204(15 downto 0);
    tmp_205<= resize( x2_7 , 22 );
    tmp_206<= resize( op_x2_7 , 22 );
    tmp_207 <= tmp_205 - tmp_206 ;
    i1_7 <= tmp_207 + opi1_7 ;
    tmp_204 <= shift_right(opi1_7,5) ;
    tmp_218 <= shift_right(tmp_192,1) ; -- scale output of cel 7
    -- accumulation of output: tmp_218 of cel 7 with local output: tmp_217
    tmp_219 <= tmp_217 + tmp_218 ;
    ----------------------------------------------------------
    -- end of filter, scale global output : tmp_219
    ----------------------------------------------------------
    tmp_220 <= shift_right(tmp_219,13) ;
    output_16 <= tmp_220(15 downto 0);
    sor <= std_logic_vector(output_16);
end Behavioral;
