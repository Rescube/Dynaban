function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_allpass_1(lambda,..
        a0)
// compute FES for first order allpass (a0.z+1)/(z+a0)
      m=2;n=3;
      Zr= zeros(m,n);
      N0w= Zr;
      N1w= Zr;
      N2w= Zr;
      N3w= Zr;
      N4w= Zr;
      D0w= Zr;
      D1w= Zr;
      D2w= Zr;
      D3w= Zr;
      D4w= Zr;
      t1 = -a0
      t2 = t1-1
      t3 = t1+1
      t4 = t2*lambda
      t5 = a0-1
      t6 = t5*lambda
      N0w(1,1) = t2
      N0w(1,2) = t2
      N0w(2,1) = -2*lambda
      N0w(2,2) = -2
      N0w(2,3) = 1
      N1w(1,1) = t3
      N1w(1,2) = t3
      N1w(1,3) = -2
      N1w(2,3) = -1
      D0w(1,1) = t2
      D0w(1,2) = t4
      D0w(1,3) = t4
      D0w(2,1) = t2
      D0w(2,2) = t2
      D0w(2,3) = t2
      D1w(1,1) = t5
      D1w(1,2) = t6
      D1w(1,3) = t6
      D1w(2,1) = t5
      D1w(2,2) = t5
      D1w(2,3) = t5
      w=poly(0,'w');
      Nw=N0w+N1w*w+N2w*w^2+N3w*w^3+N4w*w^4;
      Dw=D0w+D1w*w+D2w*w^2+D3w*w^3+D4w*w^4;
      z=poly(0,'z');
      z_1=poly(0,'z_1');
      w_de_z=(z-1)/(z+1);
      w_de_z_1=(1-z_1)/(1+z_1);
     [Nw,Dw]=make_as_list(real(Nw),real(Dw),%t);
     Fw=make_as_F(Nw,Dw);
     Fz=hornerij(Fw,w_de_z,'hd');
     [Nz,Dz]=make_as_ND(Fz);
     Fz_1=hornerij(Fw,w_de_z_1,'ld');
     [Nz_1,Dz_1]=make_as_ND(Fz_1);
endfunction
function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_allpass_J(lambda,..
        b2,b3)
// compute FES for second order allpass type J
// Fz=(1-b2.[1+b3].z+b3.z^2)/(z^2-b2.[1+b3].z+b3)
// see Lutovac
      m=3;n=4;
      Zr= zeros(m,n);
      N0w= Zr;
      N1w= Zr;
      N2w= Zr;
      N3w= Zr;
      N4w= Zr;
      D0w= Zr;
      D1w= Zr;
      D2w= Zr;
      D3w= Zr;
      D4w= Zr;
      t1 = -b2
      t2 = t1+1
      t3 = t2*b3+t1+1
      t4 = -b3
      t5 = 2*b3-2
      t6 = -4*b3-4
      t7 = b2+1
      t8 = t7*b3+b2+1
      t9 = t3*lambda
      t10 = 2-2*b3
      t11 = t10*lambda
      t12 = t8*lambda
      N0w(1,1) = t3
      N0w(1,2) = t3
      N0w(1,3) = 2-2*b2
      N0w(1,4) = t4+1
      N0w(2,3) = t2
      N0w(2,4) = 1
      N0w(3,4) = b3+1
      N1w(1,1) = t5
      N1w(1,2) = t5
      N1w(2,1) = -4*lambda
      N1w(2,2) = -4
      N1w(2,3) = -2
      N1w(3,1) = t6*lambda
      N1w(3,2) = t6
      N1w(3,3) = -4
      N2w(1,1) = t8
      N2w(1,2) = t8
      N2w(1,3) = 2*b2+2
      N2w(1,4) = b3-1
      N2w(2,3) = t7
      N2w(2,4) = -1
      N2w(3,4) = t4-1
      D0w(1,1) = t3
      D0w(1,2) = t9
      D0w(1,3) = t9
      D0w(1,4) = t9
      D0w(2,1) = t3
      D0w(2,2) = t3
      D0w(2,3) = t3
      D0w(2,4) = t3
      D0w(3,1) = t3
      D0w(3,2) = t3
      D0w(3,3) = t3
      D0w(3,4) = t3
      D1w(1,1) = t10
      D1w(1,2) = t11
      D1w(1,3) = t11
      D1w(1,4) = t11
      D1w(2,1) = t10
      D1w(2,2) = t10
      D1w(2,3) = t10
      D1w(2,4) = t10
      D1w(3,1) = t10
      D1w(3,2) = t10
      D1w(3,3) = t10
      D1w(3,4) = t10
      D2w(1,1) = t8
      D2w(1,2) = t12
      D2w(1,3) = t12
      D2w(1,4) = t12
      D2w(2,1) = t8
      D2w(2,2) = t8
      D2w(2,3) = t8
      D2w(2,4) = t8
      D2w(3,1) = t8
      D2w(3,2) = t8
      D2w(3,3) = t8
      D2w(3,4) = t8
      w=poly(0,'w');
      Nw=N0w+N1w*w+N2w*w^2+N3w*w^3+N4w*w^4;
      Dw=D0w+D1w*w+D2w*w^2+D3w*w^3+D4w*w^4;
      z=poly(0,'z');
      z_1=poly(0,'z_1');
      w_de_z=(z-1)/(z+1);
      w_de_z_1=(1-z_1)/(1+z_1);
     [Nw,Dw]=make_as_list(real(Nw),real(Dw),%t);
     Fw=make_as_F(Nw,Dw);
     Fz=hornerij(Fw,w_de_z,'hd');
     [Nz,Dz]=make_as_ND(Fz);
     Fz_1=hornerij(Fw,w_de_z_1,'ld');
     [Nz_1,Dz_1]=make_as_ND(Fz_1);
endfunction
function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_allpass_M(lambda,..
        b2,b3)
// compute FES for second order allpass type M
// Fz=(1-b2.[1+b3].z+b3.z^2)/(z^2-b2.[1+b3].z+b3)
// see Lutovac
      m=3;n=4;
      Zr= zeros(m,n);
      N0w= Zr;
      N1w= Zr;
      N2w= Zr;
      N3w= Zr;
      N4w= Zr;
      D0w= Zr;
      D1w= Zr;
      D2w= Zr;
      D3w= Zr;
      D4w= Zr;
      t1 = -b2
      t2 = t1+1
      t3 = t2*b3+t1+1
      t4 = -2*b3
      t5 = t4+2
      t6 = 2*b3
      t7 = t6-2
      t8 = t4-2
      t9 = b2+1
      t10 = t9*b3+b2+1
      t11 = t6+2
      t12 = t3*lambda
      t13 = t5*lambda
      t14 = t10*lambda
      N0w(1,1) = t3
      N0w(1,2) = t3
      N0w(1,3) = 2-2*b2
      N0w(1,4) = t5
      N0w(2,3) = t2
      N0w(2,4) = 2
      N0w(3,4) = b3+1
      N1w(1,1) = t7
      N1w(1,2) = t7
      N1w(1,4) = t5
      N1w(2,1) = -4*lambda
      N1w(2,2) = -4
      N1w(2,3) = -2
      N1w(2,4) = 2
      N1w(3,1) = t8*lambda
      N1w(3,2) = t8
      N1w(3,3) = -2
      N2w(1,1) = t10
      N2w(1,2) = t10
      N2w(1,3) = 2*b2+2
      N2w(2,3) = t9
      N2w(3,1) = t11*lambda
      N2w(3,2) = t11
      N2w(3,3) = 2
      N2w(3,4) = -b3-1
      D0w(1,1) = t3
      D0w(1,2) = t12
      D0w(1,3) = t12
      D0w(1,4) = t12
      D0w(2,1) = t3
      D0w(2,2) = t3
      D0w(2,3) = t3
      D0w(2,4) = t3
      D0w(3,1) = t3
      D0w(3,2) = t3
      D0w(3,3) = t3
      D0w(3,4) = t3
      D1w(1,1) = t5
      D1w(1,2) = t13
      D1w(1,3) = t13
      D1w(1,4) = t13
      D1w(2,1) = t5
      D1w(2,2) = t5
      D1w(2,3) = t5
      D1w(2,4) = t5
      D1w(3,1) = t5
      D1w(3,2) = t5
      D1w(3,3) = t5
      D1w(3,4) = t5
      D2w(1,1) = t10
      D2w(1,2) = t14
      D2w(1,3) = t14
      D2w(1,4) = t14
      D2w(2,1) = t10
      D2w(2,2) = t10
      D2w(2,3) = t10
      D2w(2,4) = t10
      D2w(3,1) = t10
      D2w(3,2) = t10
      D2w(3,3) = t10
      D2w(3,4) = t10
      w=poly(0,'w');
      Nw=N0w+N1w*w+N2w*w^2+N3w*w^3+N4w*w^4;
      Dw=D0w+D1w*w+D2w*w^2+D3w*w^3+D4w*w^4;
      z=poly(0,'z');
      z_1=poly(0,'z_1');
      w_de_z=(z-1)/(z+1);
      w_de_z_1=(1-z_1)/(1+z_1);
     [Nw,Dw]=make_as_list(real(Nw),real(Dw),%t);
     Fw=make_as_F(Nw,Dw);
     Fz=hornerij(Fw,w_de_z,'hd');
     [Nz,Dz]=make_as_ND(Fz);
     Fz_1=hornerij(Fw,w_de_z_1,'ld');
     [Nz_1,Dz_1]=make_as_ND(Fz_1);
endfunction
function [Nz,Dz,Nw,Dw,Nz_1,Dz_1]=clc_allpass_Q(lambda,..
        b2,b3)
// compute FES for second order allpass type Q
// Fz=(1-b2.[1+b3].z+b3.z^2)/(z^2-b2.[1+b3].z+b3)
// see Lutovac
      m=3;n=4;
      Zr= zeros(m,n);
      N0w= Zr;
      N1w= Zr;
      N2w= Zr;
      N3w= Zr;
      N4w= Zr;
      D0w= Zr;
      D1w= Zr;
      D2w= Zr;
      D3w= Zr;
      D4w= Zr;
      t1 = -b2
      t2 = t1+1
      t3 = t2*b3+t1+1
      t4 = 2*b3
      t5 = t4+2
      t6 = t4-2
      t7 = -2*b3
      t8 = t7-2
      t9 = b2+1
      t10 = t9*b3+b2+1
      t11 = t3*lambda
      t12 = t7+2
      t13 = t12*lambda
      t14 = t10*lambda
      N0w(1,1) = t3
      N0w(1,2) = t3
      N0w(1,3) = 2-2*b2
      N0w(2,3) = t2
      N0w(3,1) = t5*lambda
      N0w(3,2) = t5
      N0w(3,3) = 2
      N0w(3,4) = b3+1
      N1w(1,1) = t6
      N1w(1,2) = t6
      N1w(1,4) = t6
      N1w(2,1) = -4*lambda
      N1w(2,2) = -4
      N1w(2,3) = -2
      N1w(2,4) = -2
      N1w(3,1) = t8*lambda
      N1w(3,2) = t8
      N1w(3,3) = -2
      N2w(1,1) = t10
      N2w(1,2) = t10
      N2w(1,3) = 2*b2+2
      N2w(1,4) = t6
      N2w(2,3) = t9
      N2w(2,4) = -2
      N2w(3,4) = -b3-1
      D0w(1,1) = t3
      D0w(1,2) = t11
      D0w(1,3) = t11
      D0w(1,4) = t11
      D0w(2,1) = t3
      D0w(2,2) = t3
      D0w(2,3) = t3
      D0w(2,4) = t3
      D0w(3,1) = t3
      D0w(3,2) = t3
      D0w(3,3) = t3
      D0w(3,4) = t3
      D1w(1,1) = t12
      D1w(1,2) = t13
      D1w(1,3) = t13
      D1w(1,4) = t13
      D1w(2,1) = t12
      D1w(2,2) = t12
      D1w(2,3) = t12
      D1w(2,4) = t12
      D1w(3,1) = t12
      D1w(3,2) = t12
      D1w(3,3) = t12
      D1w(3,4) = t12
      D2w(1,1) = t10
      D2w(1,2) = t14
      D2w(1,3) = t14
      D2w(1,4) = t14
      D2w(2,1) = t10
      D2w(2,2) = t10
      D2w(2,3) = t10
      D2w(2,4) = t10
      D2w(3,1) = t10
      D2w(3,2) = t10
      D2w(3,3) = t10
      D2w(3,4) = t10
      w=poly(0,'w');
      Nw=N0w+N1w*w+N2w*w^2+N3w*w^3+N4w*w^4;
      Dw=D0w+D1w*w+D2w*w^2+D3w*w^3+D4w*w^4;
      z=poly(0,'z');
      z_1=poly(0,'z_1');
      w_de_z=(z-1)/(z+1);
      w_de_z_1=(1-z_1)/(1+z_1);
     [Nw,Dw]=make_as_list(real(Nw),real(Dw),%t);
     Fw=make_as_F(Nw,Dw);
     Fz=hornerij(Fw,w_de_z,'hd');
     [Nz,Dz]=make_as_ND(Fz);
     Fz_1=hornerij(Fw,w_de_z_1,'ld');
     [Nz_1,Dz_1]=make_as_ND(Fz_1);
endfunction
  function [NFESz,DFESz]=FES_allpass( Sz,type_allpass)
    [lhs,rhs]=argn(0);
    if (rhs<2) then
      type_allpass="J";
    end
    lambda=1;
    if (typeof(Sz)~="list") then
      l=list();
      l(1)=Sz;
      Sz=l; 
    end
    NFESz=list();
    DFESz=list();
    NB_S=length(Sz);
    for i=1:NB_S,
      Fi=Sz(i);
      Ni=numer(Fi);
      Di=denom(Fi);
      if (degree(Di)==1) then
      // cell of degree 1
        a0=-roots(Di);
        [Nzi,Dzi,Nwi,Dwi,Nz_1i,Dz_1i]=clc_allpass_1(lambda,a0);
      else
      // cell of degree 2
        Ni=Ni/coeff(Di,2);
        Di=Di/coeff(Di,2);
        b3=coeff(Di,0);
        b2=- coeff(Di,1) / (1+b3);
        if (type_allpass=="J") then
          [Nzi,Dzi,Nwi,Dwi,Nz_1i,Dz_1i]=clc_allpass_J(lambda,b2,b3);
        elseif (type_allpass=="M") then
          [Nzi,Dzi,Nwi,Dwi,Nz_1i,Dz_1i]=clc_allpass_M(lambda,b2,b3);
        elseif (type_allpass=="Q") then
          [Nzi,Dzi,Nwi,Dwi,Nz_1i,Dz_1i]=clc_allpass_Q(lambda,b2,b3);
        else
          error("bad type of allpass cell :"+type_allpass);
        end
      end
      NFESz(i)=Nzi;
      DFESz(i)=Dzi;
    end
  endfunction

