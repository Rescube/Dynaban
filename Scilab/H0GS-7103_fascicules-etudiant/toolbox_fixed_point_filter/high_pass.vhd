----------------------------------------------------------------------------------
-- Company: Universite Bordeaux 1 departement EEA
-- Engineer: Autogenerated code 
--
-- Create Date:    
-- Design Name:
-- Module Name:    high_pass - Behavioral
-- Project Name:
-- Target Devices:
-- Tool versions:
-- Description:
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.ALL;-- use signed numbers for numerical computations
entity high_pass is
Port ( ent       : in   STD_LOGIC_VECTOR (15 downto 0); --N=16 bits
       sor       : out  STD_LOGIC_VECTOR (15 downto 0); --N=16 bits
       clk_50MHz : in std_logic ;
       f_ech     : in std_logic);
end high_pass;
architecture Behavioral of RII_exemple is
 signal tmp_1, tmp_3, x2_2, x1_2, opx2_2, x2_3, x1_3, opx2_3, x2_4, x1_4 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal opx2_4, x2_5, x1_5, opx2_5, x2_6, x1_6, opx2_6, x2_7, x1_7, opx2_7 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal x2_8, x1_8, opx2_8, x2_9, x1_9, opx2_9, x2_10, x1_10, opx2_10, x2_11 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal x1_11, opx2_11, x2_12, x1_12, opx2_12, x2_13, x1_13, opx2_13, x2_14, x1_14 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal opx2_14, x2_15, x1_15, opx2_15, x2_16, x1_16, opx2_16, output_16 : signed (15 downto 0) := "0000000000000000";-- signaux intermediaires sur 16 bits,  niveau 0
 signal opi1_2, tmp_19, tmp_20, tmp_21, tmp_22, tmp_23, tmp_24, i1_2, opi2_2, tmp_28 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_29, tmp_30, tmp_31, tmp_32, tmp_33, i2_2, opi1_3, tmp_49, tmp_50, tmp_51 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_52, tmp_53, tmp_54, i1_3, opi2_3, tmp_58, tmp_59, tmp_60, tmp_61, tmp_62 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_63, i2_3, opi1_4, tmp_79, tmp_80, tmp_81, tmp_82, tmp_83, tmp_84, i1_4 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal opi2_4, tmp_88, tmp_89, tmp_90, tmp_91, tmp_92, tmp_93, i2_4, opi1_5, tmp_109 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_110, tmp_111, tmp_112, tmp_113, tmp_114, i1_5, opi2_5, tmp_118, tmp_119, tmp_120 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_121, tmp_122, tmp_123, i2_5, opi1_6, tmp_139, tmp_140, tmp_141, tmp_142, tmp_143 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_144, i1_6, opi2_6, tmp_148, tmp_149, tmp_150, tmp_151, tmp_152, tmp_153, i2_6 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal opi1_7, tmp_169, tmp_170, tmp_171, tmp_172, tmp_173, tmp_174, i1_7, opi2_7, tmp_178 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_179, tmp_180, tmp_181, tmp_182, tmp_183, i2_7, opi1_8, tmp_199, tmp_200, tmp_201 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_202, tmp_203, tmp_204, i1_8, opi2_8, tmp_208, tmp_209, tmp_210, tmp_211, tmp_212 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal tmp_213, i2_8, opi1_9, tmp_229, tmp_230, tmp_231, tmp_232, tmp_233, tmp_234, i1_9 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal opi2_9, tmp_238, tmp_239, tmp_240, tmp_241, tmp_242, tmp_243, i2_9 : signed (21 downto 0) := "0000000000000000000000";-- signaux intermediaires sur 22 bits,  niveau 0
 signal opi1_10, tmp_259, tmp_260, tmp_261, tmp_262, tmp_263, tmp_264, i1_10, opi2_10, tmp_268 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_269, tmp_270, tmp_271, tmp_272, tmp_273, i2_10, opi1_11, tmp_289, tmp_290, tmp_291 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_292, tmp_293, tmp_294, i1_11, opi2_11, tmp_298, tmp_299, tmp_300, tmp_301, tmp_302 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_303, i2_11, opi1_12, tmp_319, tmp_320, tmp_321, tmp_322, tmp_323, tmp_324, i1_12 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal opi2_12, tmp_328, tmp_329, tmp_330, tmp_331, tmp_332, tmp_333, i2_12, opi1_13, tmp_349 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_350, tmp_351, tmp_352, tmp_353, tmp_354, i1_13, opi2_13, tmp_358, tmp_359, tmp_360 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal tmp_361, tmp_362, tmp_363, i2_13 : signed (22 downto 0) := "00000000000000000000000";-- signaux intermediaires sur 23 bits,  niveau 0
 signal opi1_14, tmp_379, tmp_380, tmp_381, tmp_382, tmp_383, tmp_384, i1_14, opi2_14, tmp_388 : signed (23 downto 0) := "000000000000000000000000";-- signaux intermediaires sur 24 bits,  niveau 0
 signal tmp_389, tmp_390, tmp_391, tmp_392, tmp_393, i2_14, opi1_15, tmp_409, tmp_410, tmp_411 : signed (23 downto 0) := "000000000000000000000000";-- signaux intermediaires sur 24 bits,  niveau 0
 signal tmp_412, tmp_413, tmp_414, i1_15, opi2_15, tmp_418, tmp_419, tmp_420, tmp_421, tmp_422 : signed (23 downto 0) := "000000000000000000000000";-- signaux intermediaires sur 24 bits,  niveau 0
 signal tmp_423, i2_15, opi1_16, tmp_439, tmp_440, tmp_441, tmp_442, tmp_443, tmp_444, i1_16 : signed (23 downto 0) := "000000000000000000000000";-- signaux intermediaires sur 24 bits,  niveau 0
 signal opi2_16, tmp_448, tmp_449, tmp_450, tmp_451, tmp_452, tmp_453, i2_16 : signed (23 downto 0) := "000000000000000000000000";-- signaux intermediaires sur 24 bits,  niveau 0
 signal tmp_2, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_10, tmp_11, tmp_12 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_13, tmp_14, tmp_15, tmp_35, tmp_36, tmp_37, tmp_38, tmp_39, tmp_40, tmp_41 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_42, tmp_43, tmp_44, tmp_45, tmp_65, tmp_66, tmp_67, tmp_68, tmp_69, tmp_70 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_71, tmp_72, tmp_73, tmp_74, tmp_75, tmp_95, tmp_96, tmp_97, tmp_98, tmp_99 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_100, tmp_101, tmp_102, tmp_103, tmp_104, tmp_105, tmp_125, tmp_126, tmp_127, tmp_128 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_129, tmp_130, tmp_131, tmp_132, tmp_133, tmp_134, tmp_135, tmp_155, tmp_156, tmp_157 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_158, tmp_159, tmp_160, tmp_161, tmp_162, tmp_163, tmp_164, tmp_165, tmp_185, tmp_186 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_187, tmp_188, tmp_189, tmp_190, tmp_191, tmp_192, tmp_193, tmp_194, tmp_195, tmp_215 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_216, tmp_217, tmp_218, tmp_219, tmp_220, tmp_221, tmp_222, tmp_223, tmp_224, tmp_225 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_245, tmp_246, tmp_247, tmp_248, tmp_249, tmp_250, tmp_251, tmp_252, tmp_253, tmp_254 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_255, tmp_275, tmp_276, tmp_277, tmp_278, tmp_279, tmp_280, tmp_281, tmp_282, tmp_283 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_284, tmp_285, tmp_305, tmp_306, tmp_307, tmp_308, tmp_309, tmp_310, tmp_311, tmp_312 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_313, tmp_314, tmp_315, tmp_335, tmp_336, tmp_337, tmp_338, tmp_339, tmp_340, tmp_341 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_342, tmp_343, tmp_344, tmp_345, tmp_365, tmp_366, tmp_367, tmp_368, tmp_369, tmp_370 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_371, tmp_372, tmp_373, tmp_374, tmp_375, tmp_395, tmp_396, tmp_397, tmp_398, tmp_399 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_400, tmp_401, tmp_402, tmp_403, tmp_404, tmp_405, tmp_425, tmp_426, tmp_427, tmp_428 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_429, tmp_430, tmp_431, tmp_432, tmp_433, tmp_434, tmp_435, tmp_455, tmp_456, tmp_457 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_458, tmp_459, tmp_460, tmp_461, tmp_462, tmp_463, tmp_464, tmp_465, tmp_466, tmp_467 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_468, tmp_469, tmp_470, tmp_471, tmp_472, tmp_473, tmp_474, tmp_475, tmp_476, tmp_477 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_478, tmp_479, tmp_480, tmp_481, tmp_482, tmp_483, tmp_484, tmp_485, tmp_486, tmp_487 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_488, tmp_489, tmp_490, tmp_491, tmp_492, tmp_493, tmp_494, tmp_495, tmp_496, tmp_497 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
 signal tmp_498, tmp_499, tmp_500, tmp_501, tmp_502, tmp_503, tmp_504, tmp_505, tmp_506, tmp_507 : signed (31 downto 0) := "00000000000000000000000000000000";-- signaux intermediaires sur 32 bits,  niveau 0
begin
    ---------------------------------------------------------------------------------------------------------------
    -- begin of filter : convert 16 bits logic input :ent, to signed equivalent :tmp_1
    ---------------------------------------------------------------------------------------------------------------------
    tmp_1 <= signed(ent);
    tmp_2<= resize( tmp_1 , 32 );
    ---------------------------------------------
    -- code of cel 1
    ---------------------------------------------
     -- en<-en .2^0 
    tmp_3<= resize( tmp_2 , 16 ); -- en<-b0 . en 
    tmp_4 <= tmp_3 * to_signed(31101,16) ;
    tmp_455 <= shift_right(tmp_4,5) ; -- scale output of cel 1
    tmp_456 <= tmp_455 + to_signed(1,32) ;
    tmp_457 <= shift_right(tmp_456,1) ;
    -- local output :tmp_457 of cel 1 will be accumulated
    ---------------------------------------------
    -- code of cel 2
    ---------------------------------------------
    tmp_5 <= shift_left(tmp_2,6) ; -- en<<L+LA ,L=-8,LA=14
      -- AR part of cel 2
    tmp_6 <= x2_2 * to_signed(31957,16) ; -- - a1 . x1 
    tmp_7 <= tmp_6 + tmp_5 ;
    tmp_8 <= opx2_2 * to_signed(-31927,16) ; -- - a2 . x2 
    tmp_9 <= tmp_8 + tmp_7 ;
    tmp_10 <= shift_right(tmp_9,13) ; -- vn<-en >> LA 
    tmp_11 <= tmp_10 + to_signed(1,32) ;
    tmp_12 <= shift_right(tmp_11,1) ;
    x1_2 <= tmp_12(15 downto 0); -- x1=vn  
      -- MA part of cel 2
    tmp_13 <= x2_2 * to_signed(-8601,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_14 <= opx2_2 * to_signed(20156,16) ; -- b2 .op x2
    tmp_15 <= tmp_14 + tmp_13 ; -- output of cel 2
    -- x2_2 <- q(x1_2), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_1: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_2 <= i1_2 ;
           end if;
      end if;
    end process;
    x2_2 <= tmp_21(15 downto 0);
    tmp_22<= resize( x1_2 , 22 );
    tmp_23<= resize( x2_2 , 22 );
    tmp_24 <= tmp_22 - tmp_23 ;
    i1_2 <= tmp_24 + opi1_2 ;
    tmp_19 <= shift_right(opi1_2,4) ;
    tmp_20 <= tmp_19 + to_signed(1,22) ;
    tmp_21 <= shift_right(tmp_20,1) ;
    -- opx2_2 <- q(x2_2), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_2: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_2 <= i2_2 ;
           end if;
      end if;
    end process;
    opx2_2 <= tmp_30(15 downto 0);
    tmp_31<= resize( x2_2 , 22 );
    tmp_32<= resize( opx2_2 , 22 );
    tmp_33 <= tmp_31 - tmp_32 ;
    i2_2 <= tmp_33 + opi2_2 ;
    tmp_28 <= shift_right(opi2_2,4) ;
    tmp_29 <= tmp_28 + to_signed(1,22) ;
    tmp_30 <= shift_right(tmp_29,1) ;
    tmp_458 <= shift_right(tmp_15,1) ; -- scale output of cel 2
    tmp_459 <= tmp_458 + to_signed(1,32) ;
    tmp_460 <= shift_right(tmp_459,1) ;
    -- accumulation of output: tmp_460 of cel 2 with local output: tmp_457
    tmp_461 <= tmp_457 + tmp_460 ;
    ---------------------------------------------
    -- code of cel 3
    ---------------------------------------------
    tmp_35 <= shift_left(tmp_2,8) ; -- en<<L+LA ,L=-6,LA=14
      -- AR part of cel 3
    tmp_36 <= x2_3 * to_signed(31372,16) ; -- - a1 . x1 
    tmp_37 <= tmp_36 + tmp_35 ;
    tmp_38 <= opx2_3 * to_signed(-30988,16) ; -- - a2 . x2 
    tmp_39 <= tmp_38 + tmp_37 ;
    tmp_40 <= shift_right(tmp_39,13) ; -- vn<-en >> LA 
    tmp_41 <= tmp_40 + to_signed(1,32) ;
    tmp_42 <= shift_right(tmp_41,1) ;
    x1_3 <= tmp_42(15 downto 0); -- x1=vn  
      -- MA part of cel 3
    tmp_43 <= x2_3 * to_signed(-16150,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_44 <= opx2_3 * to_signed(16999,16) ; -- b2 .op x2
    tmp_45 <= tmp_44 + tmp_43 ; -- output of cel 3
    -- x2_3 <- q(x1_3), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_3: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_3 <= i1_3 ;
           end if;
      end if;
    end process;
    x2_3 <= tmp_51(15 downto 0);
    tmp_52<= resize( x1_3 , 22 );
    tmp_53<= resize( x2_3 , 22 );
    tmp_54 <= tmp_52 - tmp_53 ;
    i1_3 <= tmp_54 + opi1_3 ;
    tmp_49 <= shift_right(opi1_3,4) ;
    tmp_50 <= tmp_49 + to_signed(1,22) ;
    tmp_51 <= shift_right(tmp_50,1) ;
    -- opx2_3 <- q(x2_3), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_4: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_3 <= i2_3 ;
           end if;
      end if;
    end process;
    opx2_3 <= tmp_60(15 downto 0);
    tmp_61<= resize( x2_3 , 22 );
    tmp_62<= resize( opx2_3 , 22 );
    tmp_63 <= tmp_61 - tmp_62 ;
    i2_3 <= tmp_63 + opi2_3 ;
    tmp_58 <= shift_right(opi2_3,4) ;
    tmp_59 <= tmp_58 + to_signed(1,22) ;
    tmp_60 <= shift_right(tmp_59,1) ;
    tmp_462 <= shift_right(tmp_45,1) ; -- scale output of cel 3
    tmp_463 <= tmp_462 + to_signed(1,32) ;
    tmp_464 <= shift_right(tmp_463,1) ;
    -- accumulation of output: tmp_464 of cel 3 with local output: tmp_461
    tmp_465 <= tmp_461 + tmp_464 ;
    ---------------------------------------------
    -- code of cel 4
    ---------------------------------------------
    tmp_65 <= shift_left(tmp_2,9) ; -- en<<L+LA ,L=-5,LA=14
      -- AR part of cel 4
    tmp_66 <= x2_4 * to_signed(30808,16) ; -- - a1 . x1 
    tmp_67 <= tmp_66 + tmp_65 ;
    tmp_68 <= opx2_4 * to_signed(-29740,16) ; -- - a2 . x2 
    tmp_69 <= tmp_68 + tmp_67 ;
    tmp_70 <= shift_right(tmp_69,13) ; -- vn<-en >> LA 
    tmp_71 <= tmp_70 + to_signed(1,32) ;
    tmp_72 <= shift_right(tmp_71,1) ;
    x1_4 <= tmp_72(15 downto 0); -- x1=vn  
      -- MA part of cel 4
    tmp_73 <= x2_4 * to_signed(-32031,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_74 <= opx2_4 * to_signed(4300,16) ; -- b2 .op x2
    tmp_75 <= tmp_74 + tmp_73 ; -- output of cel 4
    -- x2_4 <- q(x1_4), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_5: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_4 <= i1_4 ;
           end if;
      end if;
    end process;
    x2_4 <= tmp_81(15 downto 0);
    tmp_82<= resize( x1_4 , 22 );
    tmp_83<= resize( x2_4 , 22 );
    tmp_84 <= tmp_82 - tmp_83 ;
    i1_4 <= tmp_84 + opi1_4 ;
    tmp_79 <= shift_right(opi1_4,4) ;
    tmp_80 <= tmp_79 + to_signed(1,22) ;
    tmp_81 <= shift_right(tmp_80,1) ;
    -- opx2_4 <- q(x2_4), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_6: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_4 <= i2_4 ;
           end if;
      end if;
    end process;
    opx2_4 <= tmp_90(15 downto 0);
    tmp_91<= resize( x2_4 , 22 );
    tmp_92<= resize( opx2_4 , 22 );
    tmp_93 <= tmp_91 - tmp_92 ;
    i2_4 <= tmp_93 + opi2_4 ;
    tmp_88 <= shift_right(opi2_4,4) ;
    tmp_89 <= tmp_88 + to_signed(1,22) ;
    tmp_90 <= shift_right(tmp_89,1) ;
    tmp_466 <= shift_right(tmp_75,2) ; -- scale output of cel 4
    tmp_467 <= tmp_466 + to_signed(1,32) ;
    tmp_468 <= shift_right(tmp_467,1) ;
    -- accumulation of output: tmp_468 of cel 4 with local output: tmp_465
    tmp_469 <= tmp_465 + tmp_468 ;
    ---------------------------------------------
    -- code of cel 5
    ---------------------------------------------
    tmp_95 <= shift_left(tmp_2,9) ; -- en<<L+LA ,L=-5,LA=14
      -- AR part of cel 5
    tmp_96 <= x2_5 * to_signed(30271,16) ; -- - a1 . x1 
    tmp_97 <= tmp_96 + tmp_95 ;
    tmp_98 <= opx2_5 * to_signed(-28219,16) ; -- - a2 . x2 
    tmp_99 <= tmp_98 + tmp_97 ;
    tmp_100 <= shift_right(tmp_99,13) ; -- vn<-en >> LA 
    tmp_101 <= tmp_100 + to_signed(1,32) ;
    tmp_102 <= shift_right(tmp_101,1) ;
    x1_5 <= tmp_102(15 downto 0); -- x1=vn  
      -- MA part of cel 5
    tmp_103 <= x2_5 * to_signed(-6396,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_104 <= opx2_5 * to_signed(-30486,16) ; -- b2 .op x2
    tmp_105 <= tmp_104 + tmp_103 ; -- output of cel 5
    -- x2_5 <- q(x1_5), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_7: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_5 <= i1_5 ;
           end if;
      end if;
    end process;
    x2_5 <= tmp_111(15 downto 0);
    tmp_112<= resize( x1_5 , 22 );
    tmp_113<= resize( x2_5 , 22 );
    tmp_114 <= tmp_112 - tmp_113 ;
    i1_5 <= tmp_114 + opi1_5 ;
    tmp_109 <= shift_right(opi1_5,4) ;
    tmp_110 <= tmp_109 + to_signed(1,22) ;
    tmp_111 <= shift_right(tmp_110,1) ;
    -- opx2_5 <- q(x2_5), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_8: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_5 <= i2_5 ;
           end if;
      end if;
    end process;
    opx2_5 <= tmp_120(15 downto 0);
    tmp_121<= resize( x2_5 , 22 );
    tmp_122<= resize( opx2_5 , 22 );
    tmp_123 <= tmp_121 - tmp_122 ;
    i2_5 <= tmp_123 + opi2_5 ;
    tmp_118 <= shift_right(opi2_5,4) ;
    tmp_119 <= tmp_118 + to_signed(1,22) ;
    tmp_120 <= shift_right(tmp_119,1) ;
    tmp_470 <= shift_right(tmp_105,1) ; -- scale output of cel 5
    tmp_471 <= tmp_470 + to_signed(1,32) ;
    tmp_472 <= shift_right(tmp_471,1) ;
    -- accumulation of output: tmp_472 of cel 5 with local output: tmp_469
    tmp_473 <= tmp_469 + tmp_472 ;
    ---------------------------------------------
    -- code of cel 6
    ---------------------------------------------
    tmp_125 <= shift_left(tmp_2,10) ; -- en<<L+LA ,L=-4,LA=14
      -- AR part of cel 6
    tmp_126 <= x2_6 * to_signed(29764,16) ; -- - a1 . x1 
    tmp_127 <= tmp_126 + tmp_125 ;
    tmp_128 <= opx2_6 * to_signed(-26473,16) ; -- - a2 . x2 
    tmp_129 <= tmp_128 + tmp_127 ;
    tmp_130 <= shift_right(tmp_129,13) ; -- vn<-en >> LA 
    tmp_131 <= tmp_130 + to_signed(1,32) ;
    tmp_132 <= shift_right(tmp_131,1) ;
    x1_6 <= tmp_132(15 downto 0); -- x1=vn  
      -- MA part of cel 6
    tmp_133 <= x2_6 * to_signed(7025,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_134 <= opx2_6 * to_signed(-18757,16) ; -- b2 .op x2
    tmp_135 <= tmp_134 + tmp_133 ; -- output of cel 6
    -- x2_6 <- q(x1_6), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_9: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_6 <= i1_6 ;
           end if;
      end if;
    end process;
    x2_6 <= tmp_141(15 downto 0);
    tmp_142<= resize( x1_6 , 22 );
    tmp_143<= resize( x2_6 , 22 );
    tmp_144 <= tmp_142 - tmp_143 ;
    i1_6 <= tmp_144 + opi1_6 ;
    tmp_139 <= shift_right(opi1_6,4) ;
    tmp_140 <= tmp_139 + to_signed(1,22) ;
    tmp_141 <= shift_right(tmp_140,1) ;
    -- opx2_6 <- q(x2_6), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_10: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_6 <= i2_6 ;
           end if;
      end if;
    end process;
    opx2_6 <= tmp_150(15 downto 0);
    tmp_151<= resize( x2_6 , 22 );
    tmp_152<= resize( opx2_6 , 22 );
    tmp_153 <= tmp_151 - tmp_152 ;
    i2_6 <= tmp_153 + opi2_6 ;
    tmp_148 <= shift_right(opi2_6,4) ;
    tmp_149 <= tmp_148 + to_signed(1,22) ;
    tmp_150 <= shift_right(tmp_149,1) ;
     -- scale output of cel 6
    tmp_474 <= tmp_135 + to_signed(1,32) ;
    tmp_475 <= shift_right(tmp_474,1) ;
    -- accumulation of output: tmp_475 of cel 6 with local output: tmp_473
    tmp_476 <= tmp_473 + tmp_475 ;
    ---------------------------------------------
    -- code of cel 7
    ---------------------------------------------
    tmp_155 <= shift_left(tmp_2,10) ; -- en<<L+LA ,L=-4,LA=14
      -- AR part of cel 7
    tmp_156 <= x2_7 * to_signed(29292,16) ; -- - a1 . x1 
    tmp_157 <= tmp_156 + tmp_155 ;
    tmp_158 <= opx2_7 * to_signed(-24560,16) ; -- - a2 . x2 
    tmp_159 <= tmp_158 + tmp_157 ;
    tmp_160 <= shift_right(tmp_159,13) ; -- vn<-en >> LA 
    tmp_161 <= tmp_160 + to_signed(1,32) ;
    tmp_162 <= shift_right(tmp_161,1) ;
    x1_7 <= tmp_162(15 downto 0); -- x1=vn  
      -- MA part of cel 7
    tmp_163 <= x2_7 * to_signed(18682,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_164 <= opx2_7 * to_signed(-26163,16) ; -- b2 .op x2
    tmp_165 <= tmp_164 + tmp_163 ; -- output of cel 7
    -- x2_7 <- q(x1_7), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_11: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_7 <= i1_7 ;
           end if;
      end if;
    end process;
    x2_7 <= tmp_171(15 downto 0);
    tmp_172<= resize( x1_7 , 22 );
    tmp_173<= resize( x2_7 , 22 );
    tmp_174 <= tmp_172 - tmp_173 ;
    i1_7 <= tmp_174 + opi1_7 ;
    tmp_169 <= shift_right(opi1_7,4) ;
    tmp_170 <= tmp_169 + to_signed(1,22) ;
    tmp_171 <= shift_right(tmp_170,1) ;
    -- opx2_7 <- q(x2_7), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_12: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_7 <= i2_7 ;
           end if;
      end if;
    end process;
    opx2_7 <= tmp_180(15 downto 0);
    tmp_181<= resize( x2_7 , 22 );
    tmp_182<= resize( opx2_7 , 22 );
    tmp_183 <= tmp_181 - tmp_182 ;
    i2_7 <= tmp_183 + opi2_7 ;
    tmp_178 <= shift_right(opi2_7,4) ;
    tmp_179 <= tmp_178 + to_signed(1,22) ;
    tmp_180 <= shift_right(tmp_179,1) ;
     -- scale output of cel 7
    tmp_477 <= tmp_165 + to_signed(1,32) ;
    tmp_478 <= shift_right(tmp_477,1) ;
    -- accumulation of output: tmp_478 of cel 7 with local output: tmp_476
    tmp_479 <= tmp_476 + tmp_478 ;
    ---------------------------------------------
    -- code of cel 8
    ---------------------------------------------
    tmp_185 <= shift_left(tmp_2,10) ; -- en<<L+LA ,L=-4,LA=14
      -- AR part of cel 8
    tmp_186 <= x2_8 * to_signed(28859,16) ; -- - a1 . x1 
    tmp_187 <= tmp_186 + tmp_185 ;
    tmp_188 <= opx2_8 * to_signed(-22546,16) ; -- - a2 . x2 
    tmp_189 <= tmp_188 + tmp_187 ;
    tmp_190 <= shift_right(tmp_189,13) ; -- vn<-en >> LA 
    tmp_191 <= tmp_190 + to_signed(1,32) ;
    tmp_192 <= shift_right(tmp_191,1) ;
    x1_8 <= tmp_192(15 downto 0); -- x1=vn  
      -- MA part of cel 8
    tmp_193 <= x2_8 * to_signed(28224,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_194 <= opx2_8 * to_signed(-25787,16) ; -- b2 .op x2
    tmp_195 <= tmp_194 + tmp_193 ; -- output of cel 8
    -- x2_8 <- q(x1_8), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_13: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_8 <= i1_8 ;
           end if;
      end if;
    end process;
    x2_8 <= tmp_201(15 downto 0);
    tmp_202<= resize( x1_8 , 22 );
    tmp_203<= resize( x2_8 , 22 );
    tmp_204 <= tmp_202 - tmp_203 ;
    i1_8 <= tmp_204 + opi1_8 ;
    tmp_199 <= shift_right(opi1_8,4) ;
    tmp_200 <= tmp_199 + to_signed(1,22) ;
    tmp_201 <= shift_right(tmp_200,1) ;
    -- opx2_8 <- q(x2_8), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_14: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_8 <= i2_8 ;
           end if;
      end if;
    end process;
    opx2_8 <= tmp_210(15 downto 0);
    tmp_211<= resize( x2_8 , 22 );
    tmp_212<= resize( opx2_8 , 22 );
    tmp_213 <= tmp_211 - tmp_212 ;
    i2_8 <= tmp_213 + opi2_8 ;
    tmp_208 <= shift_right(opi2_8,4) ;
    tmp_209 <= tmp_208 + to_signed(1,22) ;
    tmp_210 <= shift_right(tmp_209,1) ;
     -- scale output of cel 8
    tmp_480 <= tmp_195 + to_signed(1,32) ;
    tmp_481 <= shift_right(tmp_480,1) ;
    -- accumulation of output: tmp_481 of cel 8 with local output: tmp_479
    tmp_482 <= tmp_479 + tmp_481 ;
    ---------------------------------------------
    -- code of cel 9
    ---------------------------------------------
    tmp_215 <= shift_left(tmp_2,10) ; -- en<<L+LA ,L=-4,LA=14
      -- AR part of cel 9
    tmp_216 <= x2_9 * to_signed(28468,16) ; -- - a1 . x1 
    tmp_217 <= tmp_216 + tmp_215 ;
    tmp_218 <= opx2_9 * to_signed(-20504,16) ; -- - a2 . x2 
    tmp_219 <= tmp_218 + tmp_217 ;
    tmp_220 <= shift_right(tmp_219,13) ; -- vn<-en >> LA 
    tmp_221 <= tmp_220 + to_signed(1,32) ;
    tmp_222 <= shift_right(tmp_221,1) ;
    x1_9 <= tmp_222(15 downto 0); -- x1=vn  
      -- MA part of cel 9
    tmp_223 <= x2_9 * to_signed(31595,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_224 <= opx2_9 * to_signed(-17653,16) ; -- b2 .op x2
    tmp_225 <= tmp_224 + tmp_223 ; -- output of cel 9
    -- x2_9 <- q(x1_9), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_15: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_9 <= i1_9 ;
           end if;
      end if;
    end process;
    x2_9 <= tmp_231(15 downto 0);
    tmp_232<= resize( x1_9 , 22 );
    tmp_233<= resize( x2_9 , 22 );
    tmp_234 <= tmp_232 - tmp_233 ;
    i1_9 <= tmp_234 + opi1_9 ;
    tmp_229 <= shift_right(opi1_9,4) ;
    tmp_230 <= tmp_229 + to_signed(1,22) ;
    tmp_231 <= shift_right(tmp_230,1) ;
    -- opx2_9 <- q(x2_9), avec q=(2^-5)/(z-[ 1 - (2^-5) ] )
    z_16: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_9 <= i2_9 ;
           end if;
      end if;
    end process;
    opx2_9 <= tmp_240(15 downto 0);
    tmp_241<= resize( x2_9 , 22 );
    tmp_242<= resize( opx2_9 , 22 );
    tmp_243 <= tmp_241 - tmp_242 ;
    i2_9 <= tmp_243 + opi2_9 ;
    tmp_238 <= shift_right(opi2_9,4) ;
    tmp_239 <= tmp_238 + to_signed(1,22) ;
    tmp_240 <= shift_right(tmp_239,1) ;
     -- scale output of cel 9
    tmp_483 <= tmp_225 + to_signed(1,32) ;
    tmp_484 <= shift_right(tmp_483,1) ;
    -- accumulation of output: tmp_484 of cel 9 with local output: tmp_482
    tmp_485 <= tmp_482 + tmp_484 ;
    ---------------------------------------------
    -- code of cel 10
    ---------------------------------------------
    tmp_245 <= shift_left(tmp_2,10) ; -- en<<L+LA ,L=-3,LA=13
      -- AR part of cel 10
    tmp_246 <= x2_10 * to_signed(11737,16) ; -- - a1 . x1 
    tmp_247 <= tmp_246 + tmp_245 ;
    tmp_248 <= opx2_10 * to_signed(-17087,16) ; -- - a2 . x2 
    tmp_249 <= tmp_248 + tmp_247 ;
    tmp_250 <= shift_right(tmp_249,12) ; -- vn<-en >> LA 
    tmp_251 <= tmp_250 + to_signed(1,32) ;
    tmp_252 <= shift_right(tmp_251,1) ;
    x1_10 <= tmp_252(15 downto 0); -- x1=vn  
      -- MA part of cel 10
    tmp_253 <= x2_10 * to_signed(27086,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_254 <= opx2_10 * to_signed(18203,16) ; -- b2 .op x2
    tmp_255 <= tmp_254 + tmp_253 ; -- output of cel 10
    -- x2_10 <- q(x1_10), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_17: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_10 <= i1_10 ;
           end if;
      end if;
    end process;
    x2_10 <= tmp_261(15 downto 0);
    tmp_262<= resize( x1_10 , 23 );
    tmp_263<= resize( x2_10 , 23 );
    tmp_264 <= tmp_262 - tmp_263 ;
    i1_10 <= tmp_264 + opi1_10 ;
    tmp_259 <= shift_right(opi1_10,5) ;
    tmp_260 <= tmp_259 + to_signed(1,23) ;
    tmp_261 <= shift_right(tmp_260,1) ;
    -- opx2_10 <- q(x2_10), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_18: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_10 <= i2_10 ;
           end if;
      end if;
    end process;
    opx2_10 <= tmp_270(15 downto 0);
    tmp_271<= resize( x2_10 , 23 );
    tmp_272<= resize( opx2_10 , 23 );
    tmp_273 <= tmp_271 - tmp_272 ;
    i2_10 <= tmp_273 + opi2_10 ;
    tmp_268 <= shift_right(opi2_10,5) ;
    tmp_269 <= tmp_268 + to_signed(1,23) ;
    tmp_270 <= shift_right(tmp_269,1) ;
     -- scale output of cel 10
    tmp_486 <= tmp_255 + to_signed(1,32) ;
    tmp_487 <= shift_right(tmp_486,1) ;
    -- accumulation of output: tmp_487 of cel 10 with local output: tmp_485
    tmp_488 <= tmp_485 + tmp_487 ;
    ---------------------------------------------
    -- code of cel 11
    ---------------------------------------------
    tmp_275 <= shift_left(tmp_2,11) ; -- en<<L+LA ,L=-3,LA=14
      -- AR part of cel 11
    tmp_276 <= x2_11 * to_signed(22874,16) ; -- - a1 . x1 
    tmp_277 <= tmp_276 + tmp_275 ;
    tmp_278 <= opx2_11 * to_signed(-27270,16) ; -- - a2 . x2 
    tmp_279 <= tmp_278 + tmp_277 ;
    tmp_280 <= shift_right(tmp_279,13) ; -- vn<-en >> LA 
    tmp_281 <= tmp_280 + to_signed(1,32) ;
    tmp_282 <= shift_right(tmp_281,1) ;
    x1_11 <= tmp_282(15 downto 0); -- x1=vn  
      -- MA part of cel 11
    tmp_283 <= x2_11 * to_signed(7633,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_284 <= opx2_11 * to_signed(18066,16) ; -- b2 .op x2
    tmp_285 <= tmp_284 + tmp_283 ; -- output of cel 11
    -- x2_11 <- q(x1_11), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_19: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_11 <= i1_11 ;
           end if;
      end if;
    end process;
    x2_11 <= tmp_291(15 downto 0);
    tmp_292<= resize( x1_11 , 23 );
    tmp_293<= resize( x2_11 , 23 );
    tmp_294 <= tmp_292 - tmp_293 ;
    i1_11 <= tmp_294 + opi1_11 ;
    tmp_289 <= shift_right(opi1_11,5) ;
    tmp_290 <= tmp_289 + to_signed(1,23) ;
    tmp_291 <= shift_right(tmp_290,1) ;
    -- opx2_11 <- q(x2_11), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_20: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_11 <= i2_11 ;
           end if;
      end if;
    end process;
    opx2_11 <= tmp_300(15 downto 0);
    tmp_301<= resize( x2_11 , 23 );
    tmp_302<= resize( opx2_11 , 23 );
    tmp_303 <= tmp_301 - tmp_302 ;
    i2_11 <= tmp_303 + opi2_11 ;
    tmp_298 <= shift_right(opi2_11,5) ;
    tmp_299 <= tmp_298 + to_signed(1,23) ;
    tmp_300 <= shift_right(tmp_299,1) ;
     -- scale output of cel 11
    -- accumulation of output: tmp_285 of cel 11 with local output: tmp_488
    tmp_489 <= tmp_488 + tmp_285 ;
    ---------------------------------------------
    -- code of cel 12
    ---------------------------------------------
    tmp_305 <= shift_left(tmp_2,12) ; -- en<<L+LA ,L=-2,LA=14
      -- AR part of cel 12
    tmp_306 <= x2_12 * to_signed(22369,16) ; -- - a1 . x1 
    tmp_307 <= tmp_306 + tmp_305 ;
    tmp_308 <= opx2_12 * to_signed(-21029,16) ; -- - a2 . x2 
    tmp_309 <= tmp_308 + tmp_307 ;
    tmp_310 <= shift_right(tmp_309,13) ; -- vn<-en >> LA 
    tmp_311 <= tmp_310 + to_signed(1,32) ;
    tmp_312 <= shift_right(tmp_311,1) ;
    x1_12 <= tmp_312(15 downto 0); -- x1=vn  
      -- MA part of cel 12
    tmp_313 <= x2_12 * to_signed(-831,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_314 <= opx2_12 * to_signed(23333,16) ; -- b2 .op x2
    tmp_315 <= tmp_314 + tmp_313 ; -- output of cel 12
    -- x2_12 <- q(x1_12), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_21: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_12 <= i1_12 ;
           end if;
      end if;
    end process;
    x2_12 <= tmp_321(15 downto 0);
    tmp_322<= resize( x1_12 , 23 );
    tmp_323<= resize( x2_12 , 23 );
    tmp_324 <= tmp_322 - tmp_323 ;
    i1_12 <= tmp_324 + opi1_12 ;
    tmp_319 <= shift_right(opi1_12,5) ;
    tmp_320 <= tmp_319 + to_signed(1,23) ;
    tmp_321 <= shift_right(tmp_320,1) ;
    -- opx2_12 <- q(x2_12), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_22: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_12 <= i2_12 ;
           end if;
      end if;
    end process;
    opx2_12 <= tmp_330(15 downto 0);
    tmp_331<= resize( x2_12 , 23 );
    tmp_332<= resize( opx2_12 , 23 );
    tmp_333 <= tmp_331 - tmp_332 ;
    i2_12 <= tmp_333 + opi2_12 ;
    tmp_328 <= shift_right(opi2_12,5) ;
    tmp_329 <= tmp_328 + to_signed(1,23) ;
    tmp_330 <= shift_right(tmp_329,1) ;
     -- scale output of cel 12
    tmp_490 <= tmp_315 + to_signed(1,32) ;
    tmp_491 <= shift_right(tmp_490,1) ;
    -- accumulation of output: tmp_491 of cel 12 with local output: tmp_489
    tmp_492 <= tmp_489 + tmp_491 ;
    ---------------------------------------------
    -- code of cel 13
    ---------------------------------------------
    tmp_335 <= shift_left(tmp_2,12) ; -- en<<L+LA ,L=-2,LA=14
      -- AR part of cel 13
    tmp_336 <= x2_13 * to_signed(21963,16) ; -- - a1 . x1 
    tmp_337 <= tmp_336 + tmp_335 ;
    tmp_338 <= opx2_13 * to_signed(-15702,16) ; -- - a2 . x2 
    tmp_339 <= tmp_338 + tmp_337 ;
    tmp_340 <= shift_right(tmp_339,13) ; -- vn<-en >> LA 
    tmp_341 <= tmp_340 + to_signed(1,32) ;
    tmp_342 <= shift_right(tmp_341,1) ;
    x1_13 <= tmp_342(15 downto 0); -- x1=vn  
      -- MA part of cel 13
    tmp_343 <= x2_13 * to_signed(-10309,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_344 <= opx2_13 * to_signed(24801,16) ; -- b2 .op x2
    tmp_345 <= tmp_344 + tmp_343 ; -- output of cel 13
    -- x2_13 <- q(x1_13), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_23: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_13 <= i1_13 ;
           end if;
      end if;
    end process;
    x2_13 <= tmp_351(15 downto 0);
    tmp_352<= resize( x1_13 , 23 );
    tmp_353<= resize( x2_13 , 23 );
    tmp_354 <= tmp_352 - tmp_353 ;
    i1_13 <= tmp_354 + opi1_13 ;
    tmp_349 <= shift_right(opi1_13,5) ;
    tmp_350 <= tmp_349 + to_signed(1,23) ;
    tmp_351 <= shift_right(tmp_350,1) ;
    -- opx2_13 <- q(x2_13), avec q=(2^-6)/(z-[ 1 - (2^-6) ] )
    z_24: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_13 <= i2_13 ;
           end if;
      end if;
    end process;
    opx2_13 <= tmp_360(15 downto 0);
    tmp_361<= resize( x2_13 , 23 );
    tmp_362<= resize( opx2_13 , 23 );
    tmp_363 <= tmp_361 - tmp_362 ;
    i2_13 <= tmp_363 + opi2_13 ;
    tmp_358 <= shift_right(opi2_13,5) ;
    tmp_359 <= tmp_358 + to_signed(1,23) ;
    tmp_360 <= shift_right(tmp_359,1) ;
     -- scale output of cel 13
    tmp_493 <= tmp_345 + to_signed(1,32) ;
    tmp_494 <= shift_right(tmp_493,1) ;
    -- accumulation of output: tmp_494 of cel 13 with local output: tmp_492
    tmp_495 <= tmp_492 + tmp_494 ;
    ---------------------------------------------
    -- code of cel 14
    ---------------------------------------------
    tmp_365 <= shift_left(tmp_2,13) ; -- en<<L+LA ,L=-1,LA=14
      -- AR part of cel 14
    tmp_366 <= x2_14 * to_signed(10545,16) ; -- - a1 . x1 
    tmp_367 <= tmp_366 + tmp_365 ;
    tmp_368 <= opx2_14 * to_signed(-19096,16) ; -- - a2 . x2 
    tmp_369 <= tmp_368 + tmp_367 ;
    tmp_370 <= shift_right(tmp_369,13) ; -- vn<-en >> LA 
    tmp_371 <= tmp_370 + to_signed(1,32) ;
    tmp_372 <= shift_right(tmp_371,1) ;
    x1_14 <= tmp_372(15 downto 0); -- x1=vn  
      -- MA part of cel 14
    tmp_373 <= x2_14 * to_signed(-19176,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_374 <= opx2_14 * to_signed(28013,16) ; -- b2 .op x2
    tmp_375 <= tmp_374 + tmp_373 ; -- output of cel 14
    -- x2_14 <- q(x1_14), avec q=(2^-7)/(z-[ 1 - (2^-7) ] )
    z_25: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_14 <= i1_14 ;
           end if;
      end if;
    end process;
    x2_14 <= tmp_381(15 downto 0);
    tmp_382<= resize( x1_14 , 24 );
    tmp_383<= resize( x2_14 , 24 );
    tmp_384 <= tmp_382 - tmp_383 ;
    i1_14 <= tmp_384 + opi1_14 ;
    tmp_379 <= shift_right(opi1_14,6) ;
    tmp_380 <= tmp_379 + to_signed(1,24) ;
    tmp_381 <= shift_right(tmp_380,1) ;
    -- opx2_14 <- q(x2_14), avec q=(2^-7)/(z-[ 1 - (2^-7) ] )
    z_26: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_14 <= i2_14 ;
           end if;
      end if;
    end process;
    opx2_14 <= tmp_390(15 downto 0);
    tmp_391<= resize( x2_14 , 24 );
    tmp_392<= resize( opx2_14 , 24 );
    tmp_393 <= tmp_391 - tmp_392 ;
    i2_14 <= tmp_393 + opi2_14 ;
    tmp_388 <= shift_right(opi2_14,6) ;
    tmp_389 <= tmp_388 + to_signed(1,24) ;
    tmp_390 <= shift_right(tmp_389,1) ;
     -- scale output of cel 14
    tmp_496 <= tmp_375 + to_signed(1,32) ;
    tmp_497 <= shift_right(tmp_496,1) ;
    -- accumulation of output: tmp_497 of cel 14 with local output: tmp_495
    tmp_498 <= tmp_495 + tmp_497 ;
    ---------------------------------------------
    -- code of cel 15
    ---------------------------------------------
    tmp_395 <= shift_left(tmp_2,14) ; -- en<<L+LA ,L=-1,LA=15
      -- AR part of cel 15
    tmp_396 <= x2_15 * to_signed(20270,16) ; -- - a1 . x1 
    tmp_397 <= tmp_396 + tmp_395 ;
    tmp_398 <= opx2_15 * to_signed(-15845,16) ; -- - a2 . x2 
    tmp_399 <= tmp_398 + tmp_397 ;
    tmp_400 <= shift_right(tmp_399,14) ; -- vn<-en >> LA 
    tmp_401 <= tmp_400 + to_signed(1,32) ;
    tmp_402 <= shift_right(tmp_401,1) ;
    x1_15 <= tmp_402(15 downto 0); -- x1=vn  
      -- MA part of cel 15
    tmp_403 <= x2_15 * to_signed(-25986,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_404 <= opx2_15 * to_signed(16839,16) ; -- b2 .op x2
    tmp_405 <= tmp_404 + tmp_403 ; -- output of cel 15
    -- x2_15 <- q(x1_15), avec q=(2^-7)/(z-[ 1 - (2^-7) ] )
    z_27: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_15 <= i1_15 ;
           end if;
      end if;
    end process;
    x2_15 <= tmp_411(15 downto 0);
    tmp_412<= resize( x1_15 , 24 );
    tmp_413<= resize( x2_15 , 24 );
    tmp_414 <= tmp_412 - tmp_413 ;
    i1_15 <= tmp_414 + opi1_15 ;
    tmp_409 <= shift_right(opi1_15,6) ;
    tmp_410 <= tmp_409 + to_signed(1,24) ;
    tmp_411 <= shift_right(tmp_410,1) ;
    -- opx2_15 <- q(x2_15), avec q=(2^-7)/(z-[ 1 - (2^-7) ] )
    z_28: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_15 <= i2_15 ;
           end if;
      end if;
    end process;
    opx2_15 <= tmp_420(15 downto 0);
    tmp_421<= resize( x2_15 , 24 );
    tmp_422<= resize( opx2_15 , 24 );
    tmp_423 <= tmp_421 - tmp_422 ;
    i2_15 <= tmp_423 + opi2_15 ;
    tmp_418 <= shift_right(opi2_15,6) ;
    tmp_419 <= tmp_418 + to_signed(1,24) ;
    tmp_420 <= shift_right(tmp_419,1) ;
     -- scale output of cel 15
    tmp_499 <= tmp_405 + to_signed(1,32) ;
    tmp_500 <= shift_right(tmp_499,1) ;
    -- accumulation of output: tmp_500 of cel 15 with local output: tmp_498
    tmp_501 <= tmp_498 + tmp_500 ;
    ---------------------------------------------
    -- code of cel 16
    ---------------------------------------------
    tmp_425 <= shift_left(tmp_2,14) ; -- en<<L+LA ,L=-1,LA=15
      -- AR part of cel 16
    tmp_426 <= x2_16 * to_signed(19859,16) ; -- - a1 . x1 
    tmp_427 <= tmp_426 + tmp_425 ;
    tmp_428 <= opx2_16 * to_signed(-4431,16) ; -- - a2 . x2 
    tmp_429 <= tmp_428 + tmp_427 ;
    tmp_430 <= shift_right(tmp_429,14) ; -- vn<-en >> LA 
    tmp_431 <= tmp_430 + to_signed(1,32) ;
    tmp_432 <= shift_right(tmp_431,1) ;
    x1_16 <= tmp_432(15 downto 0); -- x1=vn  
      -- MA part of cel 16
    tmp_433 <= x2_16 * to_signed(-29672,16) ; -- en<-b1 . x2 ,because b0=0
    tmp_434 <= opx2_16 * to_signed(10024,16) ; -- b2 .op x2
    tmp_435 <= tmp_434 + tmp_433 ; -- output of cel 16
    -- x2_16 <- q(x1_16), avec q=(2^-7)/(z-[ 1 - (2^-7) ] )
    z_29: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi1_16 <= i1_16 ;
           end if;
      end if;
    end process;
    x2_16 <= tmp_441(15 downto 0);
    tmp_442<= resize( x1_16 , 24 );
    tmp_443<= resize( x2_16 , 24 );
    tmp_444 <= tmp_442 - tmp_443 ;
    i1_16 <= tmp_444 + opi1_16 ;
    tmp_439 <= shift_right(opi1_16,6) ;
    tmp_440 <= tmp_439 + to_signed(1,24) ;
    tmp_441 <= shift_right(tmp_440,1) ;
    -- opx2_16 <- q(x2_16), avec q=(2^-7)/(z-[ 1 - (2^-7) ] )
    z_30: process(clk_50MHz, f_ech)
    begin
      if rising_edge(clk_50MHz) then if f_ech='1' then opi2_16 <= i2_16 ;
           end if;
      end if;
    end process;
    opx2_16 <= tmp_450(15 downto 0);
    tmp_451<= resize( x2_16 , 24 );
    tmp_452<= resize( opx2_16 , 24 );
    tmp_453 <= tmp_451 - tmp_452 ;
    i2_16 <= tmp_453 + opi2_16 ;
    tmp_448 <= shift_right(opi2_16,6) ;
    tmp_449 <= tmp_448 + to_signed(1,24) ;
    tmp_450 <= shift_right(tmp_449,1) ;
     -- scale output of cel 16
    tmp_502 <= tmp_435 + to_signed(1,32) ;
    tmp_503 <= shift_right(tmp_502,1) ;
    -- accumulation of output: tmp_503 of cel 16 with local output: tmp_501
    tmp_504 <= tmp_501 + tmp_503 ;
    ----------------------------------------------------------
    -- end of filter, scale global output : tmp_504
    ----------------------------------------------------------
    tmp_505 <= shift_right(tmp_504,8) ;
    tmp_506 <= tmp_505 + to_signed(1,32) ;
    tmp_507 <= shift_right(tmp_506,1) ;
    output_16 <= tmp_507(15 downto 0);
    sor <= std_logic_vector(output_16);
end Behavioral;
